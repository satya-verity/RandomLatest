. Context
Building a Semantic Analyzer as an initial stage for executable code generation is crucial because it ensures the source code's correctness beyond syntax, which is vital for successful compilation. It performs contextual checks and verifies both static and dynamic semantics. This process catches errors that a lexer or parser cannot, such as checking if variables are declared before use, if types match on both sides of an assignment, and if parameter types and numbers match in function declarations and uses. By catching these errors early, the Semantic Analyzer helps prevent issues that could arise during the code-generation phase, thereby streamlining the compilation process.

2. Terms and Definitions
Contextual Checks: The process of ensuring that variables are declared before use, types match on both sides of an assignment, and parameter types and numbers match in function declarations and uses.

Parse Tree Input: The input to the Semantic Analyzer, which is a Parse Tree generated by the parser. A Parse Tree is a hierarchical structure that represents the derivation of the grammar to yield input strings.

Symbol Table Generation: The process of constructing and maintaining a symbol table, which maps identifier names to their attributes for each memory scope.

Semantic Verification: The process of verifying both static and dynamic semantics, ensuring that each expression has a correct type and generating code to check dynamic semantics at runtime.

Semantic Context Output: The output of the Semantic Analyzer, which includes the Abstract Syntax Tree (AST) and memory scope-related symbol tables.

3. Requirements
The Semantic Analyzer design requires it to take a Parse Tree as input, generate a Symbol Table, perform Contextual Checks, and verify both static and dynamic semantics. It should output a Semantic Context, report any semantic errors, and integrate seamlessly with other compiler components. The design should be efficient and well-documented, detailing design decisions, the structure of the symbol table, the error reporting mechanism, and the integration with other compiler components.

3.1. Parse Tree Input 
The Semantic Analyzer should take as input Parse Tree generated by the parser.

3.2. Symbol Table Generation 
The Semantic Analyzer should construct and maintain a symbol table. This table should map identifier names to their attributes for each memory scope.

3.3. Contextual Checks 
The Semantic Analyzer should perform contextual checks to ensure that variables are declared before use, types match on both sides of an assignment, and parameter types and numbers match in function declarations and uses.

3.4. Semantic Verification 
The Semantic Analyzer should verify both static and dynamic semantics. It should ensure that each expression has a correct type and generate code to check dynamic semantics at runtime.

3.5. Semantic Context Output 
The Semantic Analyzer should output a semantic context, which includes the AST and memory scope-related symbol tables. This output will be used in the subsequent code-generation phase.

3.6. Error Reporting 
The Semantic Analyzer should report any semantic errors it encounters in a clear and understandable manner, indicating the location of the error in the source code and providing a description of the error.

3.7. Integration with Compiler 
The Semantic Analyzer should be designed to integrate seamlessly with the other components of the compiler, particularly the parser and the code generator.

3.8. Performance 
The Semantic Analyzer should be efficient in terms of time and space complexity. It should be able to handle large source files and complex programs without significantly impacting the overall performance of the compiler.

3.9. Documentation 
The design and implementation of the Semantic Analyzer should be well-documented to facilitate maintenance and future enhancements. The documentation should include the design decisions, the structure of the symbol table, the error reporting mechanism, and the integration with other compiler components.

4. Design
The key design element which performs parse tree transformation into AST and builds symbol table is AstBildingVistior class. This class is derived from ANTLR automatically generated  OMLParserBaseVisitor and builds AST tree visiting nodes of the parse tree. In addition to AST generation AstBuildingVisitor  use implementation of ISymTabScopeResolver to capture names related information into appropriate scopes. The TypeResolver is needed to provide type information for expressions and other syntax constructs. All semantic errors are reported with help of SemanticAnalyser.ReportError method.

The SemanticAnalyzer class provides orchestration for the translation process and uses ANTLR generated parser to build parse tree. For this phase of translation the OMLErrorListener is responsible for capturing syntax errors and reporting them with SemanticAnalyser.ReportError method. With the help of ErrorsPostProcessor it produces meaningful error messages for user converting ANTLR cryptic output when it is needed. The final product of SemanticAnalyzer is SemanticContext class instance with captured AST and memory scopes.



Here is detailed breakdown of the class diagram.

4.1. OMLParserBaseVisitor 
This is a class generated by ANTLR that visits all nodes of the parse tree.

4.2. AstBuildingVisitor 
This class extends OMLParserBaseVisitor . It is responsible for building the Abstract Syntax Tree (AST) by visiting nodes of the parse tree and constructing memory scopes. The class utilizes AstFactory  for AST building and SymTabScopeResolver for capturing scope related information.

Properties:

Scopes - This property is of type ISymTableScopeResolver. It is used to resolve symbol table scopes, which is crucial for building the Abstract Syntax Tree (AST). It helps in mapping identifier names to their attributes for each memory scope.
Methods:

VisitStartRule(StartRuleContext context) - This is a method that returns an object of type IAstNode. It takes a StartRuleContext object as a parameter. This method is invoked at the start of the AST building process. It visits the start rule of the parse tree and initiates the construction of the AST.
Please note that other methods are omitted on the UML diagram for simplicity but must be implemented.

4.3. TypeResolver
This class also extends OMLParserBaseVisitor  and is used to provide type information for expressions and other syntax constructs. AstBuildingVisitor  composes TypeResolver  to leverage its functionality.

4.4. SymTabScopeResolver
This class implements the ISymTabScopeResolver  interface and is used to resolve symbol table scopes. AstBuildingVisitor  aggregates SymTabScopeResolver  to use its functionality. AstBuildingVisitor  uses AstFactory  to create instances of AST nodes and tree. Please see details in Symbol Table Design document.

4.5. BaseErrorListener 
This is a runtime class provided by ANTLR.

4.6. ErrorPostProcessor
This class is used in conjunction with OMLErrorsListener. It takes the cryptic error messages generated by ANTLR and transforms them into user-friendly messages. 

4.7. OMLErrorsListener 
This class extends BaseErrorListener  and is responsible for listening to and handling errors. OMLErrorsListener  composes with ErrorPostProcessor  to produce meaningful error messages for the user.

4.8. SemanticAnalyzer 
This class composes OMLEditorListener  and AstBuilderVisitor  to orchestrate the translation process. It uses the ANTLR generated parser to build the parse tree and produces a SemanticContext  class instance with captured AST and memory scopes.

Methods:

BuildContext - This method takes a string source as input, which represents the source code to be analyzed. It covers entire semantic analysis process, including building the parse tree, constructing the Abstract Syntax Tree (AST), and generating the symbol table. The method returns a SemanticContext object, which includes the AST and memory scope-related symbol tables. This output is used in the subsequent code-generation phase.

ReportError - This method is used for error reporting. It takes an ErrorContext object as a parameter, which includes details about the error such as the line number, start and end positions in the line, the error message, and the severity level. The method reports any semantic errors it encounters in a clear and understandable manner, indicating the location of the error in the source code and providing a description of the error.

4.9. SemanticContext
This class provides the necessary context for the subsequent code-generation phase after the semantic analysis. 

Properties:

Ast: This property holds the Abstract Syntax Tree (AST) that is constructed by the AstBuildingVisitor during the semantic analysis process. The AST is a tree representation of the abstract syntactic structure of the source code.

Scopes: This property is of type ISymTabScopeResolver. It holds the symbol table scopes that are resolved during the semantic analysis process. These scopes map identifier names to their attributes for each memory scope.

4.10. ErrorContext 
This class defines error-related information and uses the SeverityLevel  enumeration to categorize the severity of errors.  SemanticAnalyser , AstBuildingVisitor , and OMLErrorsListener - these classes use ErrorContext to handle and report errors.

Properties:

Line - Represents the line number in the source code where the error or warning occurred.
Start - Represents the starting position in the line of the source code where the error or warning begins.
End - Represents the ending position in the line of the source code where the error or warning ends.
Message - Holds the description of the error or warning.
Severity - Indicates the severity of the error or warning. It can be either ERROR or WARNING.
4.11. SeverityLevel 
This is an enumeration used in the ErrorContext class to categorize the severity of errors.

ERROR - This level indicates that a compile-time error has occurred. These are serious issues that prevent the program from being compiled and need to be fixed before the compilation can proceed.

WARNING - This level is used to indicate potential issues or bad practices in the code that don’t necessarily prevent the program from being compiled but could potentially lead to runtime errors or unexpected behavior.

5. Implementation notes
This design should be implemented in OCLCMacroLanguage project in OCLCMacroLanguage.Frontend.SemanticAnalyzer namespace.
