using OCLCMacroLanguage.Frontend.SemanticAnalyzer;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml;

namespace MacroRunner.Frontend.SemanticAnalyzer.OMLSymbolTable
{
    public class SymbolTableToXMLConverter
    {
        static string ConvertSymbolTableToXml(ISymbolTable symbolTable)
        {
            StringBuilder xmlBuilder = new StringBuilder();
            using (XmlWriter writer = XmlWriter.Create(xmlBuilder))
            {
                writer.WriteStartDocument();
                writer.WriteStartElement("SymbolTable");

                foreach (var entry in symbolTable.Entries)
                {
                    ConvertEntryToXml(writer, entry);
                }

                writer.WriteEndElement();
                writer.WriteEndDocument();
            }

            return xmlBuilder.ToString();
        }

        static void ConvertEntryToXml(XmlWriter writer, ISymbolTableEntry entry)
        {
            if (entry == null) return;

            writer.WriteStartElement("SYMBOL");
            writer.WriteAttributeString("name", entry.Name);
            writer.WriteAttributeString("scope", entry.SymbolTable?.Scope.ToString());
            writer.WriteAttributeString("definition", entry.Definition.ToString());

            writer.WriteStartElement("LINES");
            foreach (var lineNumber in entry.LineNumbers)
            {
                writer.WriteElementString("LineNumber", lineNumber.ToString());
            }
            writer.WriteEndElement();

            if (entry.TypeSpec != null)
            {
                writer.WriteStartElement("TYPE");
                writer.WriteAttributeString("form", entry.TypeSpec.Form.ToString());
                writer.WriteEndElement();
            }

            writer.WriteEndElement();
        }
    }
}
