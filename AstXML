using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml;
using System.Xml.Linq;

namespace OCLCMacroLanguage.Frontend.SemanticAnalyzer.ASTBuilder
{
    public class AstToXmlConverter
    {
        public string ConvertToXml(IAst ast)
        {
            StringBuilder xmlBuilder = new StringBuilder();
            using (XmlWriter writer = XmlWriter.Create(xmlBuilder))
            {
                foreach (var child in ast.Root?.Children)
                {
                    ConvertNodeToXml(writer, child);
                }
            }          
            return xmlBuilder.ToString();
        }
      
        private void ConvertNodeToXml(XmlWriter writer, IAstNode node)
        {
            if (node == null) return;
            writer.WriteStartElement(node.Type.ToString());
            if (node.Properties != null)
            {
                if (node.Properties.Id != null)
                {
                    writer.WriteAttributeString("id",node.Properties.Id.Name);
                    writer.WriteAttributeString("scope", node.Properties.Id.SymbolTable.Scope.ToString());
                }
                if (node.Properties.Value != null)
                {
                    writer.WriteAttributeString("value", node.Properties.Value.Name);
                    writer.WriteAttributeString("line", node.Properties.Value.LineNumbers.ToString());
                }
            }
            if (node.TypeSpec != null)
            {
                writer.WriteAttributeString("type_id", node.TypeSpec.Form.ToString());
            }
            writer.WriteEndElement();
        }
    }
}
