using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OCLCMacroLanguage.Frontend.SemanticAnalyzer.ASTBuilder.TypeProperties
{
    public class ArrayTypeProperties : TypeSpecProperties
    {
        public int Size { get; }
        public ValueElementType ElementType { get; }

        public ArrayTypeProperties(int size, ValueElementType elementType)
        {
            Size = size;
            ElementType = elementType;
        }     
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OCLCMacroLanguage.Frontend.SemanticAnalyzer
{
    public abstract class TypeSpecProperties
    {
        // Common properties for type specifications
    }
}
using OCLCMacroLanguage.Frontend.SemanticAnalyzer.ASTBuilder;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OCLCMacroLanguage.Frontend.SemanticAnalyzer
{
    public interface ITypeSpec
    {
        TypeForm Form { get; }
        ISymbolTableEntry Identifier { get; }
        ITypeSpec BaseType { get; }
        TypeSpecProperties Properties { get; }
    }
}
using OCLCMacroLanguage.Frontend.SemanticAnalyzer.OMLSymbolTable;

namespace OCLCMacroLanguage.Frontend.SemanticAnalyzer
{
    public interface ISymbolTableScopeResolver
    {
        string ModuleId { get; }
        void SetModuleName(string moduleName);
        void UseMemoryContext(MemoryScope memoryScope);
        MemoryScope GetActiveMemoryScope();
        ISymbolTable CreateFreshProcedureContext();
        ISymbolTable CreateCustomTypeContext();
        ISymbolTableEntry EnterActive(string name);
        ISymbolTableEntry Lookup(string name);
        ISymbolTableEntry LookupInScope(MemoryScope scope, string name);
        ISymbolTable GetMemoryContext(MemoryScope memoryScope);
    }
}
using OCLCMacroLanguage.Frontend.SemanticAnalyzer.OMLSymbolTable;
using System.Collections.Generic;

namespace OCLCMacroLanguage.Frontend.SemanticAnalyzer
{
    public interface ISymbolTableEntry
    {
        string Name { get; }
        ISymbolTable SymbolTable { get; }
        Definition Definition { get; set; }
        ITypeSpec TypeSpec { get; set; }
        IEnumerable<int> LineNumbers { get; }
        IPropertiesSet Properties { get; set; }

        void AppendLineNumber(int lineNumber);
    }
}
using OCLCMacroLanguage.Frontend.SemanticAnalyzer.OMLSymbolTable;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OCLCMacroLanguage.Frontend.SemanticAnalyzer
{
    public interface ISymbolTable
    {
        MemoryScope Scope { get; }
        int NestingLevel { get; set; }
        IEnumerable<ISymbolTableEntry> Entries { get;}

        ISymbolTableEntry Enter(string name);
        ISymbolTableEntry Lookup(string name);
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OCLCMacroLanguage.Frontend.SemanticAnalyzer
{
    public interface IPropertiesSet
    {
    }
}
using OCLCMacroLanguage.Frontend.SemanticAnalyzer.ASTBuilder;
using System.Collections.Generic;

namespace OCLCMacroLanguage.Frontend.SemanticAnalyzer
{
    public interface IAstNode
    {
        AstNodeType Type { get; }
        IAstNode Parent { get; set; }
        IEnumerable<IAstNode> Children { get; }
        ITypeSpec TypeSpec { get; set; }
        AstNodeProperties Properties { get; set; }

        void AddChild(IAstNode child);
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OCLCMacroLanguage.Frontend.SemanticAnalyzer
{
    public interface IAst
    {
        IAstNode Root { get; }
    }
}
using OCLCMacroLanguage.Frontend.SemanticAnalyzer.ASTBuilder;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OCLCMacroLanguage.Frontend.SemanticAnalyzer
{
    public class AstFactory
    {
        public IAst CreateAst(IAstNode root)
        {
            if (root == null) throw new ArgumentNullException("root");
            if (root.Parent != null) throw new ArgumentException("The parent of the root node should be null");
            return new Ast { Root = root };
        }

        public IAstNode CreateNode(AstNodeType type)
        {
            return new AstNode(type);
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OCLCMacroLanguage.Frontend.SemanticAnalyzer.OMLSymbolTable
{
    public class VariableProperties: SymbolTableEntryProperties
    {
    }
}
using OCLCMacroLanguage.Frontend.SemanticAnalyzer.OMLSymbolTable;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OCLCMacroLanguage.Frontend.SemanticAnalyzer.OMLSymbolTable
{
    public class SymbolTableScopeResolver : ISymbolTableScopeResolver
    {
        public MemoryScope ActiveMemoryScope { get; private set; }
        public string ModuleId { set; get; }
        private Dictionary<MemoryScope, SymbolTable> symbolTables;
        private Dictionary<MemoryScope, MemoryScope> parentScopes;


        public SymbolTableScopeResolver()
        {
            InitializeScopes();
            parentScopes = new Dictionary<MemoryScope, MemoryScope>
            {
                { MemoryScope.GLOBAL, MemoryScope.ROOT },
                { MemoryScope.MODULE, MemoryScope.GLOBAL },
                { MemoryScope.PROCEDURE,  MemoryScope.MODULE },
                { MemoryScope.CUSTOM_TYPE,  MemoryScope.MODULE },
                { MemoryScope.ROOT, MemoryScope.UNDEFINED }
            };
        }

        private void InitializeScopes()
        {
            symbolTables = new Dictionary<MemoryScope, SymbolTable>
            {
                { MemoryScope.ROOT, new SymbolTable(MemoryScope.ROOT) },
                { MemoryScope.GLOBAL, new SymbolTable(MemoryScope.GLOBAL) },
                { MemoryScope.MODULE, new SymbolTable(MemoryScope.MODULE) }
            };
        }

        public void SetModuleName(string moduleName)
        {
            this.ModuleId = moduleName;
        }

        public void UseMemoryContext(MemoryScope memoryScope)
        {
            this.ActiveMemoryScope = memoryScope;
        }

        private MemoryScope GetParentScope(MemoryScope memoryScope)
        {
            return parentScopes[memoryScope];
        }

        public MemoryScope GetActiveMemoryScope()
        {
            return this.ActiveMemoryScope;
        }

        public ISymbolTable CreateFreshProcedureContext()
        {
            var procedureScope = new SymbolTable(MemoryScope.PROCEDURE);
            this.symbolTables.Add(MemoryScope.PROCEDURE, procedureScope);
            return procedureScope;
        }

        public ISymbolTable CreateCustomTypeContext()
        {
            var customScope = new SymbolTable(MemoryScope.CUSTOM_TYPE);
            this.symbolTables.Add(MemoryScope.CUSTOM_TYPE, customScope);
            return customScope;
        }

        public ISymbolTableEntry EnterActive(string name)
        {
            SymbolTable symbolTable;
            symbolTables.TryGetValue(ActiveMemoryScope, out symbolTable);
            if (symbolTable == null) throw new InvalidOperationException($"Symbol table does not exist for scope {ActiveMemoryScope}");
            return symbolTable.Enter(name);
        }

        public ISymbolTableEntry Lookup(string name)
        {
            MemoryScope scope = ActiveMemoryScope;
            ISymbolTableEntry result = null;
            while (result == null && scope != MemoryScope.UNDEFINED)
            {
                result = LookupInScope(scope, name);
                scope = GetParentScope(scope);
            }
            return result;
        }

        public ISymbolTableEntry LookupInScope(MemoryScope scope, string name)
        {
            SymbolTable symbolTable;
            symbolTables.TryGetValue(scope, out symbolTable);
            return symbolTable?.Lookup(name);
        }

        public ISymbolTable GetMemoryContext(MemoryScope memoryScope)
        {
            return symbolTables[memoryScope];
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OCLCMacroLanguage.Frontend.SemanticAnalyzer
{
    public class SymbolTableEntryProperties: IPropertiesSet
    {
    }
}
using OCLCMacroLanguage.Frontend.SemanticAnalyzer;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OCLCMacroLanguage.Frontend.SemanticAnalyzer.OMLSymbolTable
{
    public class SymbolTableEntry : ISymbolTableEntry
    {
        private List<int> lineNumbers;
        public string Name { get; }
        public ISymbolTable SymbolTable { get; }
        public Definition Definition { get; set; }
        public ITypeSpec TypeSpec { get; set; }
        public IEnumerable<int> LineNumbers { get => lineNumbers; }
        public IPropertiesSet Properties { get; set; }

        public SymbolTableEntry(string name, ISymbolTable symbolTable)
        {
            Name = name;
            this.SymbolTable = symbolTable;
            this.lineNumbers = new List<int>();
        }

        public void AppendLineNumber(int lineNumber)
        {
            this.lineNumbers.Add(lineNumber);
        }
    }
}
using OCLCMacroLanguage.Frontend.SemanticAnalyzer;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OCLCMacroLanguage.Frontend.SemanticAnalyzer.OMLSymbolTable
{
    public class SymbolTable : ISymbolTable
    {
        private Dictionary<string, ISymbolTableEntry> entries;

        public MemoryScope Scope { get; set; }
        public int NestingLevel { get; set; }
        public IEnumerable<ISymbolTableEntry> Entries { get => entries.Values.ToList(); }

        public SymbolTable(MemoryScope scope)
        {
            this.Scope = scope;
            this.entries = new Dictionary<string,ISymbolTableEntry>();
        }

        public SymbolTable(MemoryScope scope, int nestingLevel): this(scope)
        {
            this.NestingLevel = nestingLevel;          
        }     

        public ISymbolTableEntry Enter(string name)
        {
            var entry = this.Lookup(name);
            if (entry == null)
            {
                entry = new SymbolTableEntry(name, this);
                this.entries.Add(name, entry);
            }
            return entry;
        }

        public ISymbolTableEntry Lookup(string name)
        {
            ISymbolTableEntry entry;
            return this.entries.TryGetValue(name, out entry) ? entry : null;
        }
    }
}
namespace OCLCMacroLanguage.Frontend.SemanticAnalyzer.OMLSymbolTable
{
    public class ProcedureProperties: SymbolTableEntryProperties
    {
        ISymbolTable ProcedureSymbolTable { get; set; }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OCLCMacroLanguage.Frontend.SemanticAnalyzer.OMLSymbolTable
{
    public enum MemoryScope
    {
        ROOT,
        GLOBAL,
        MODULE,
        CUSTOM_TYPE,
        PROCEDURE,
        UNDEFINED
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OCLCMacroLanguage.Frontend.SemanticAnalyzer.OMLSymbolTable
{
   public enum Definition
    {
        CONSTANT,
        ENUMERATION_CONSTANT,
        TYPE,
        VARIABLE,
        FIELD,
        VALUE_PARAM,
        VAR_PARAM,
        PROGRAM_PARAM,
        PROGRAM,
        PROCEDURE,
        FUNCTION,
        UNDEFINED
    }
}
namespace OCLCMacroLanguage.Frontend.SemanticAnalyzer.OMLSymbolTable
{
    public class ConstantProperties: SymbolTableEntryProperties
    {
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OCLCMacroLanguage.Frontend.SemanticAnalyzer.ASTBuilder
{
    public enum ValueElementType
    {
        INTEGER,
        REAL,
        STRING,
        BOOLEAN
    }
}
namespace OCLCMacroLanguage.Frontend.SemanticAnalyzer.ASTBuilder
{
    public class TypeSpec : ITypeSpec
    {
       
        public TypeForm Form { get; }
        public ISymbolTableEntry Identifier { get; }
        public ITypeSpec BaseType { get; }
        public TypeSpecProperties Properties { get; }

        public TypeSpec(TypeForm form, ISymbolTableEntry identifier, ITypeSpec baseType, TypeSpecProperties properties)
        {
            this.Form = form;
            this.Identifier = identifier;
            this.BaseType = baseType;
            this.Properties = properties;
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OCLCMacroLanguage.Frontend.SemanticAnalyzer.ASTBuilder
{
    public enum TypeForm
    {
        SCALAR,
        ENUMERATION,
        SUBRANGE,
        ARRAY,
        RECORD
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OCLCMacroLanguage.Frontend.SemanticAnalyzer.ASTBuilder
{
    public enum AstNodeType
    {
        PROGRAM,
        PROCEDURE,
        FUNCTION,
        LABEL,
        COMPOUND,
        ASSIGN,
        LOOP,
        TEST,
        CALL,
        PARAMETERS,
        REF_PARAM_GUARD,
        IF,
        ELSEIF,
        EQ,
        NE,
        LT,
        LE,
        GT,
        NOT,
        AND,
        OR,
        ADD,
        SUBTRACT,
        NEGATE,
        MULTIPLY,
        DIVIDE,
        INTEGER_DIVIDE,
        FLOAT_DIVIDE,
        MOD,
        POW,
        RND,
        VARIABLE,
        SUBSCRIPTS,
        FIELD,
        INTEGER_CONSTANT,
        REAL_CONSTANT,
        STRING_CONSTANT,
        BOOLEAN_CONSTANT,
        WRITE_PARM,
        CLS,
        RANDOMIZE_TIMER,
        INPUT,
        INPUT_QUESTION,
        PRINT,
        PRINT_ATTACHED_SEGMENT,
        PRINT_TAB_SEGMENT
    }
}
namespace OCLCMacroLanguage.Frontend.SemanticAnalyzer.ASTBuilder
{
    public class AstNodeProperties
    {
        public int Line { get; }
        public ISymbolTableEntry Id { get; }
        public ISymbolTableEntry Value { get; }
        public string Label { get; }

        public AstNodeProperties(int line, ISymbolTableEntry id =null, ISymbolTableEntry value = null, string label = null)
        {
            Line = line;
            Id = id;
            Value = value;
            Label = label;
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OCLCMacroLanguage.Frontend.SemanticAnalyzer.ASTBuilder
{
    // AstNode class
    public class AstNode : IAstNode
    {
        private List<IAstNode> children { get; }

        public AstNodeType Type { get; }
        public IAstNode Parent { get; set; }
        public IEnumerable<IAstNode> Children => children;
        public ITypeSpec TypeSpec { get; set; }
        public AstNodeProperties Properties { get; set; }

        public AstNode(AstNodeType type)
        {
            this.Type = type;
            this.children = new List<IAstNode>();
        }

        public void AddChild(IAstNode child)
        {
            if (child == null) throw new ArgumentNullException("child");

            child.Parent = this;
            this.children.Add(child);
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OCLCMacroLanguage.Frontend.SemanticAnalyzer.ASTBuilder
{
    public class Ast : IAst
    {
        public IAstNode Root { get; set; }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OCLCMacroLanguage.Frontend.SemanticAnalyzer.ASTBuilder.TypeProperties
{
    public class SubrangeTypeProperties : TypeSpecProperties
    {
        public int MinRange { get; }
        public int MaxRange { get; }

        public SubrangeTypeProperties(int minRange, int maxRange)
        {
            MinRange = minRange;
            MaxRange = maxRange;
        }     
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OCLCMacroLanguage.Frontend.SemanticAnalyzer.ASTBuilder.TypeProperties
{
    public class ScalarTypeProperties : TypeSpecProperties
    {
        public int MinRange { get; }
        public int MaxRange { get; }
        public bool IsSigned { get; }

        public ScalarTypeProperties(int minRange, int maxRange, bool isSigned)
        {
            MinRange = minRange;
            MaxRange = maxRange;
            IsSigned = isSigned;
        }      
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OCLCMacroLanguage.Frontend.SemanticAnalyzer.ASTBuilder.TypeProperties
{
    public class RecordTypeProperties : TypeSpecProperties
    {
        private IEnumerable<Tuple<string, ValueElementType>> fields { get; }

        public IEnumerable<Tuple<string, ValueElementType>> Fields => fields.ToList();
        public RecordTypeProperties(IEnumerable<Tuple<string, ValueElementType>> fields)
        {
            this.fields = fields.ToList();
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OCLCMacroLanguage.Frontend.SemanticAnalyzer.ASTBuilder.TypeProperties
{
    public class EnumerationTypeProperties : TypeSpecProperties
    {
        private readonly IEnumerable<string> enumerationConstants;
        public IEnumerable<string> EnumerationConstants => enumerationConstants.ToList();

        public EnumerationTypeProperties(IEnumerable<string> enumerationConstants)
        {
            this.enumerationConstants = enumerationConstants.ToList();
        }      
    }
}
