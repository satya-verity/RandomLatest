using System;
using System.Collections.Generic;
using System.Text;

public enum Definition
{
    CONSTANT,
    ENUMERATION_CONSTANT,
    TYPE,
    VARIABLE,
    FIELD,
    VALUE_PARAM,
    VAR_PARAM,
    PROGRAM_PARAM,
    PROGRAM,
    PROCEDURE,
    FUNCTION,
    UNDEFINED
}

public interface IPropertiesSet { }

public abstract class SymTabEntryProperties : IPropertiesSet { }

public class ConstantProperties : SymTabEntryProperties { }

public class ProcedureProperties : SymTabEntryProperties { }

public class VariableProperties : SymTabEntryProperties { }

public interface ITypeSpec { }

public interface ISymTabEntry
{
    string Name { get; set; }
    ISymTab SymTab { get; set; }
    Definition Definition { get; set; }
    ITypeSpec TypeSpec { get; set; }
    List<int> LineNumbers { get; set; }
    IPropertiesSet Properties { get; set; }

    void AppendLineNumber(int lineNumber);
}

public class SymTabEntry : ISymTabEntry
{
    public string Name { get; set; }
    public ISymTab SymTab { get; set; }
    public Definition Definition { get; set; }
    public ITypeSpec TypeSpec { get; set; }
    public List<int> LineNumbers { get; set; }
    public IPropertiesSet Properties { get; set; }

    public SymTabEntry(string name, ISymTab symTab, Definition definition, ITypeSpec typeSpec)
    {
        Name = name;
        SymTab = symTab;
        Definition = definition;
        TypeSpec = typeSpec;
        LineNumbers = new List<int>();
        Properties = null; // You can set specific properties based on the definition
    }

    public void AppendLineNumber(int lineNumber)
    {
        LineNumbers.Add(lineNumber);
    }
}

public enum MemoryScope
{
    ROOT,
    GLOBAL,
    MODULE,
    CUSTOM_TYPE,
    PROCEDURE
}

public interface ISymTab
{
    MemoryScope Scope { get; set; }
    int NestingLevel { get; set; }
    List<ISymTabEntry> Entries { get; set; }

    ISymTabEntry Enter(string name);
    ISymTabEntry Lookup(string name);
}

public class SymTab : ISymTab
{
    public MemoryScope Scope { get; set; }
    public int NestingLevel { get; set; }
    public List<ISymTabEntry> Entries { get; set; }

    public SymTab(MemoryScope scope, int nestingLevel)
    {
        Scope = scope;
        NestingLevel = nestingLevel;
        Entries = new List<ISymTabEntry>();
    }

    public ISymTabEntry Enter(string name)
    {
        // Implement entry creation and insertion logic
        var entry = new SymTabEntry(name, this, Definition.UNDEFINED, null);
        Entries.Add(entry);
        return entry;
    }

    public ISymTabEntry Lookup(string name)
    {
        // Implement entry lookup logic
        return Entries.Find(e => e.Name == name);
    }
}

public interface ISymTabScopeResolver
{
    string ModuleId { get; set; }

    void SetModuleName(string moduleName);
    void UseMemoryContext(MemoryScope memoryScope);
    MemoryScope GetActiveMemoryScope();
    void CreateFreshProcedureContext();
    void CreateCustomTypeContext();
    ISymTabEntry EnterActive(string name);
    ISymTabEntry Lookup(string name);
    ISymTabEntry LookupInScope(string name);
    ISymTab GetMemoryContext(MemoryScope memoryScope);
}

public class SymTabScopeResolver : ISymTabScopeResolver
{
    public string ModuleId { get; set; }
    private MemoryScope activeMemoryScope;

    public void SetModuleName(string moduleName)
    {
        ModuleId = moduleName;
    }

    public void UseMemoryContext(MemoryScope memoryScope)
    {
        activeMemoryScope = memoryScope;
    }

    public MemoryScope GetActiveMemoryScope()
    {
        return activeMemoryScope;
    }

    public void CreateFreshProcedureContext()
    {
        // Implement logic to create a new memory scope for a procedure
    }

    public void CreateCustomTypeContext()
    {
        // Implement logic to create a new memory scope for a user-defined type
    }

    public ISymTabEntry EnterActive(string name)
    {
        // Implement entry creation and insertion logic in the active memory scope
        return null;
    }

    public ISymTabEntry Lookup(string name)
    {
        // Implement entry lookup logic in all memory scopes starting from the active one
        return null;
    }

    public ISymTabEntry LookupInScope(string name)
    {
        // Implement entry lookup logic in the specified memory scope
        return null;
    }

    public ISymTab GetMemoryContext(MemoryScope memoryScope)
    {
        // Implement logic to return the memory context for the specified scope
        return null;
    }
}

public class SymTabToXmlConverter
{
    // Implement methods for converting ISymTabScopeResolver, ISymTab, and ISymTabEntry to XML
}

class Program
{
    static void Main()
    {
        // Sample usage of the implemented classes
        ISymTab symTab = new SymTab(MemoryScope.GLOBAL, 0);
        ISymTabEntry entry = symTab.Enter("variable1");

        entry.AppendLineNumber(10);
        entry.AppendLineNumber(15);

        Console.WriteLine($"Symbol: {entry.Name}, Definition: {entry.Definition}, Type: {entry.TypeSpec}, Line Numbers: {string.Join(", ", entry.LineNumbers)}");
    }
}

using System;
using System.Collections.Generic;
using System.Linq;

public enum MemoryScope
{
    ROOT,
    GLOBAL,
    MODULE,
    PROCEDURE,
    CUSTOM_TYPE
}

public interface ISymTabEntry
{
    string Name { get; }
    string Type { get; set; }
}

public interface ISymTab
{
    MemoryScope Scope { get; }
    List<ISymTabEntry> Entries { get; }
}

public interface ISymTabScopeResolver
{
    MemoryScope ActiveMemoryScope { get; }
    void SetModuleName(string moduleName);
    void UseMemoryContext(MemoryScope memoryScope);
    ISymTabEntry EnterSymbol(string name, string type);
    ISymTabEntry LookupSymbol(string name);
    ISymTab GetMemoryContext();
}

public class SymTabEntry : ISymTabEntry
{
    public string Name { get; }
    public string Type { get; set; }

    public SymTabEntry(string name, string type)
    {
        Name = name;
        Type = type;
    }
}

public class SymTab : ISymTab
{
    public MemoryScope Scope { get; }
    public List<ISymTabEntry> Entries { get; }

    public SymTab(MemoryScope scope)
    {
        Scope = scope;
        Entries = new List<ISymTabEntry>();
    }
}

public class SymTabScopeResolver : ISymTabScopeResolver
{
    public MemoryScope ActiveMemoryScope { get; private set; }
    private string moduleId;
    private SymTab rootScope;
    private SymTab currentScope;

    public SymTabScopeResolver()
    {
        ActiveMemoryScope = MemoryScope.ROOT;
        rootScope = new SymTab(MemoryScope.ROOT);
        currentScope = rootScope;
        InitializeHierarchy();
    }

    private void InitializeHierarchy()
    {
        var globalScope = AddChildScope(MemoryScope.GLOBAL);
        AddChildScope(MemoryScope.MODULE);
        AddChildScope(MemoryScope.PROCEDURE);
        AddChildScope(MemoryScope.CUSTOM_TYPE);

        // Add link from MODULE to GLOBAL
        globalScope.Entries.Add(new SymTabEntry("MODULE_TO_GLOBAL", "LINK"));
    }

    private SymTab AddChildScope(MemoryScope scope)
    {
        var childScope = new SymTab(scope);
        currentScope.Entries.Add(new SymTabEntry($"{currentScope.Scope}_TO_{scope}", "LINK"));
        currentScope = childScope;
        return childScope;
    }

    public void SetModuleName(string moduleName)
    {
        moduleId = moduleName;
    }

    public void UseMemoryContext(MemoryScope memoryScope)
    {
        ActiveMemoryScope = memoryScope;
        currentScope = FindScope(rootScope, memoryScope);
    }

    private SymTab FindScope(SymTab scope, MemoryScope targetScope)
    {
        if (scope.Scope == targetScope)
            return scope;

        foreach (var entry in scope.Entries)
        {
            if (entry.Type == "LINK")
            {
                var linkedScope = FindScope(currentScope, targetScope);
                if (linkedScope != null)
                    return linkedScope;
            }
        }

        return null;
    }

    public ISymTabEntry EnterSymbol(string name, string type)
    {
        var entry = new SymTabEntry(name, type);
        currentScope.Entries.Add(entry);
        return entry;
    }

    public ISymTabEntry LookupSymbol(string name)
    {
        var result = LookupSymbolInScope(currentScope, name);
        if (result != null)
            return result;

        return LookupSymbolInParentScopes(rootScope, name);
    }

    private ISymTabEntry LookupSymbolInScope(SymTab scope, string name)
    {
        return scope.Entries.Find(entry => entry.Name == name);
    }

    private ISymTabEntry LookupSymbolInParentScopes(SymTab scope, string name)
    {
        foreach (var entry in scope.Entries)
        {
            if (entry.Type == "LINK")
            {
                var linkedScope = FindScope(scope, ActiveMemoryScope);
                if (linkedScope != null)
                {
                    var result = LookupSymbolInScope(linkedScope, name);
                    if (result != null)
                        return result;
                }
            }
        }

        return null;
    }

    public ISymTab GetMemoryContext()
    {
        return currentScope;
    }
}

class Program
{
    static void Main()
    {
        ISymTabScopeResolver symTabScopeResolver = new SymTabScopeResolver();
        symTabScopeResolver.SetModuleName("MainModule");

        symTabScopeResolver.UseMemoryContext(MemoryScope.GLOBAL);
        symTabScopeResolver.EnterSymbol("globalVar", "INTEGER");

        symTabScopeResolver.UseMemoryContext(MemoryScope.MODULE);
        symTabScopeResolver.EnterSymbol("moduleVar", "REAL");

        symTabScopeResolver.UseMemoryContext(MemoryScope.PROCEDURE);
        symTabScopeResolver.EnterSymbol("localVar", "BOOLEAN");

        ISymTabEntry lookupResult = symTabScopeResolver.LookupSymbol("moduleVar");

        if (lookupResult != null)
        {
            Console.WriteLine($"Found entry: {lookupResult.Name} with type {lookupResult.Type} in {symTabScopeResolver.ActiveMemoryScope} scope.");
        }
        else
        {
            Console.WriteLine("Entry not found.");
        }
    }
}

