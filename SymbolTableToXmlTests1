    public class SymbolTableToXMLConverterTests
    {
        [Fact]
        public void ToXml_WithNullSymbolTableScopeResolver_ShouldReturnEmptyString()
        {
            // Arrange
            ISymbolTableScopeResolver symTabScopeResolver = null;

            // Act
            string result = SymbolTableToXMLConverter.ToXml(symTabScopeResolver);

            // Assert
            Assert.Equal(string.Empty, result);
        }

        [Fact]
        public void ToXml_WithValidSymbolTableScopeResolver_ShouldReturnValidXmlString()
        {
            // Arrange
            var mockSymbolTableScopeResolver = new Mock<ISymbolTableScopeResolver>();
            var symTables = new Dictionary<MemoryScope, ISymbolTable>();
            symTables.Add(MemoryScope.GLOBAL, CreateSymbolTable());
            mockSymbolTableScopeResolver.Setup(m => m.SymbolTables).Returns(symTables);

            // Act
            string result = SymbolTableToXMLConverter.ToXml(mockSymbolTableScopeResolver.Object);

            // Assert
            Assert.NotEmpty(result);
        }

        [Fact]
        public void ToXml_SymbolTable_CreatesValidXml()
        {
            // Arrange
            ISymbolTable symbolTable = CreateSymbolTable();

            // Act
            string xml = SymbolTableToXMLConverter.ToXml(symbolTable);

            // Assert
            Assert.NotNull(xml);
        }

        [Fact]
        public void ToXml_SymbolTableEntry_CreatesValidXml()
        {
            // Arrange
            ISymbolTable symbolTable = CreateSymbolTable();
            ISymbolTableEntry symbolTableEntry = CreateSymbolTableEntry(symbolTable);

            // Act
            string xml = SymbolTableToXMLConverter.ToXml(symbolTableEntry);

            // Assert
            Assert.NotNull(xml);
        }

        [Fact]
        public void ToXml_SymbolTableEntry_ReturnsValidXmlForScalarType()
        {
            // Arrange
            TypeSpecProperties typeSpec = new ScalarTypeProperties<int>(0, 10);
            ISymbolTable symbolTable = CreateSymbolTable();
            ISymbolTableEntry symbolTableEntry = CreateSymbolTableEntry(symbolTable);
            symbolTableEntry.TypeSpec = new TypeSpec(TypeForm.SCALAR, null, typeSpec, null);

            // Act
            string xml = SymbolTableToXMLConverter.ToXml(symbolTableEntry);

            // Assert
            Assert.NotNull(xml);
            Assert.Contains("<TYPE", xml);
            Assert.Contains("form=\"SCALAR\"", xml);
            Assert.Contains("<MIN", xml);
            Assert.Contains("<MAX", xml);
        }

        [Fact]
        public void ToXml_SymbolTableEntry_ReturnsValidXmlForSubRangeType()
        {
            // Arrange
            TypeSpecProperties typeSpec = new SubrangeTypeProperties(0, 10);
            ISymbolTable symbolTable = CreateSymbolTable();
            ISymbolTableEntry symbolTableEntry = CreateSymbolTableEntry(symbolTable);
            symbolTableEntry.TypeSpec = new TypeSpec(TypeForm.SUBRANGE, null, typeSpec, null);

            // Act
            string xml = SymbolTableToXMLConverter.ToXml(symbolTableEntry);

            // Assert
            Assert.NotNull(xml);
            Assert.Contains("<TYPE", xml);
            Assert.Contains("form=\"SUBRANGE\"", xml);
            Assert.Contains("<MIN", xml);
            Assert.Contains("<MAX", xml);
        }

        [Fact]
        public void ToXml_SymbolTableEntry_ReturnsValidXmlForArrayType()
        {
            // Arrange
            ITypeSpec subrange = new TypeSpec(
                TypeForm.SUBRANGE,
                null,
                new SubrangeTypeProperties(1, 10),
                null);

            TypeSpecProperties typeSpec = new ArrayTypeProperties(subrange);
            ISymbolTable symbolTable = CreateSymbolTable();
            ISymbolTableEntry symbolTableEntry = CreateSymbolTableEntry(symbolTable);
            symbolTableEntry.TypeSpec = new TypeSpec(TypeForm.ARRAY, null, typeSpec, null);
            // Act
            string xml = SymbolTableToXMLConverter.ToXml(symbolTableEntry);

            // Assert
            Assert.NotNull(xml);
            Assert.Contains("<TYPE", xml);
            Assert.Contains("form=\"ARRAY\"", xml);
            Assert.Contains("<INDEX", xml);
        }

        [Fact]
        public void ToXml_SymbolTableEntry_ReturnsValidXmlForEnumerationType()
        {
           //Arrange
            TypeSpecProperties typeSpec = new EnumerationTypeProperties(new List<string>() {"RED", "BLUE", "YELLOW" });
            ISymbolTable symbolTable = CreateSymbolTable();
            ISymbolTableEntry symbolTableEntry = CreateSymbolTableEntry(symbolTable);
            symbolTableEntry.TypeSpec = new TypeSpec(TypeForm.ENUMERATION, null, typeSpec, null);
            // Act
            string xml = SymbolTableToXMLConverter.ToXml(symbolTableEntry);

            // Assert
            Assert.NotNull(xml);
            Assert.Contains("<TYPE", xml);
            Assert.Contains("form=\"ENUMERATION\"", xml);
            Assert.Contains("<ITEMS", xml);
            Assert.Contains("<ITEM>RED</ITEM>", xml);
        }

        [Fact]
        public void ToXml_SymbolTableEntry_ReturnsValidXmlForRecordType()
        {
            //Arrange
            ISymbolTable fieldsSymbolTable = new SymbolTable(MemoryScope.CUSTOM_TYPE);

            var field1 =fieldsSymbolTable.Enter("Field1");
            field1.TypeSpec = new TypeSpec(TypeForm.SCALAR);
            field1.Definition = Definition.FIELD;

            var field2=fieldsSymbolTable.Enter("Field2");
            field2.TypeSpec = new TypeSpec(TypeForm.SCALAR);
            field2.Definition = Definition.FIELD;

            ISymbolTable symbolTable = CreateSymbolTable();
            ISymbolTableEntry symbolTableEntry = CreateSymbolTableEntry(symbolTable);
            symbolTableEntry.TypeSpec = new TypeSpec(TypeForm.RECORD,null, new RecordTypeProperties(fieldsSymbolTable), null);
          
            // Act
            string xml = SymbolTableToXMLConverter.ToXml(symbolTableEntry);

            // Assert
            Assert.NotNull(xml);
            Assert.Contains("<TYPE", xml);
            Assert.Contains("form=\"RECORD\"", xml);
            Assert.Contains("<FIELDS", xml);
        }

        private ISymbolTable CreateSymbolTable()
        {
            var symbolTable = new TestedSymbolTable(MemoryScope.GLOBAL);

            var entry1 = symbolTable.Enter("variable1");
            var entry2 = symbolTable.Enter("variable2");
            return symbolTable;
        }

        private ISymbolTableEntry CreateSymbolTableEntry(ISymbolTable symTab)
        {
            var entry = new SymbolTableEntry("variable", symTab);
            entry.AppendLineNumber(10);
            return entry;
        }
        private ITypeSpec CreateTypeSpec()
        {
            ITypeSpec subrange = new TypeSpec(
              TypeForm.SUBRANGE,
              null,
              new SubrangeTypeProperties(1, 10)
,
              null);
            return subrange;
        }
    }

[Fact]
public void ToXml_SymbolTableEntry_ReturnsValidXmlForTypeWithBaseType()
{
    // Arrange
    ITypeSpec baseType = new TypeSpec(
        TypeForm.SCALAR,
        null,
        new ScalarTypeProperties<int>(0, 10),
        null);

    ISymbolTable symbolTable = CreateSymbolTable();
    ISymbolTableEntry symbolTableEntry = CreateSymbolTableEntry(symbolTable);
    symbolTableEntry.TypeSpec = new TypeSpec(TypeForm.ARRAY, baseType, null, null);

    // Act
    string xml = SymbolTableToXMLConverter.ToXml(symbolTableEntry);

    // Assert
    Assert.NotNull(xml);
    Assert.Contains("<TYPE", xml);
    Assert.Contains("form=\"ARRAY\"", xml);
    Assert.Contains("<BASE_TYPE", xml);
}

[Fact]
public void ToXml_SymbolTableEntry_ReturnsValidXmlForTypeWithoutBaseType()
{
    // Arrange
    ISymbolTable symbolTable = CreateSymbolTable();
    ISymbolTableEntry symbolTableEntry = CreateSymbolTableEntry(symbolTable);
    symbolTableEntry.TypeSpec = new TypeSpec(TypeForm.ARRAY, null, null, null);

    // Act
    string xml = SymbolTableToXMLConverter.ToXml(symbolTableEntry);

    // Assert
    Assert.NotNull(xml);
    Assert.Contains("<TYPE", xml);
    Assert.Contains("form=\"ARRAY\"", xml);
    Assert.DoesNotContain("<BASE_TYPE", xml);
}
[Fact]
public void ToXml_TypeWithMatchingSymbolNameAndIdentifier_IncludesIdAttribute()
{
    // Arrange
    ISymbolTable symbolTable = CreateSymbolTable();
    ISymbolTableEntry symbolTableEntry = CreateSymbolTableEntry(symbolTable);
    IIdentifier identifier = new Identifier("CustomType");
    symbolTableEntry.Identifier = identifier;
    symbolTableEntry.Name = "CustomType";

    // Act
    string xml = SymbolTableToXMLConverter.ToXml(symbolTableEntry.TypeSpec);

    // Assert
    Assert.NotNull(xml);
    Assert.Contains("<TYPE", xml);
    Assert.Contains("id=\"CustomType\"", xml);
}

[Fact]
public void ToXml_TypeWithDifferentSymbolNameAndIdentifier_ExcludesIdAttribute()
{
    // Arrange
    ISymbolTable symbolTable = CreateSymbolTable();
    ISymbolTableEntry symbolTableEntry = CreateSymbolTableEntry(symbolTable);
    IIdentifier identifier = new Identifier("CustomType");
    symbolTableEntry.Identifier = identifier;
    symbolTableEntry.Name = "DifferentName";

    // Act
    string xml = SymbolTableToXMLConverter.ToXml(symbolTableEntry.TypeSpec);

    // Assert
    Assert.NotNull(xml);
    Assert.Contains("<TYPE", xml);
    Assert.DoesNotContain("id=\"CustomType\"", xml);
}

