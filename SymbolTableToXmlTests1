    public class SymbolTableToXMLConverterTests
    {
        [Fact]
        public void ToXml_WithNullSymbolTableScopeResolver_ShouldReturnEmptyString()
        {
            // Arrange
            ISymbolTableScopeResolver symTabScopeResolver = null;

            // Act
            string result = SymbolTableToXMLConverter.ToXml(symTabScopeResolver);

            // Assert
            Assert.Equal(string.Empty, result);
        }

        [Fact]
        public void ToXml_WithValidSymbolTableScopeResolver_ShouldReturnValidXmlString()
        {
            // Arrange
            var mockSymbolTableScopeResolver = new Mock<ISymbolTableScopeResolver>();
            var symTables = new Dictionary<MemoryScope, ISymbolTable>();
            symTables.Add(MemoryScope.GLOBAL, CreateSymbolTable());
            mockSymbolTableScopeResolver.Setup(m => m.SymbolTables).Returns(symTables);

            // Act
            string result = SymbolTableToXMLConverter.ToXml(mockSymbolTableScopeResolver.Object);

            // Assert
            Assert.NotEmpty(result);
        }

        [Fact]
        public void ToXml_SymbolTable_CreatesValidXml()
        {
            // Arrange
            ISymbolTable symbolTable = CreateSymbolTable();

            // Act
            string xml = SymbolTableToXMLConverter.ToXml(symbolTable);

            // Assert
            Assert.NotNull(xml);
        }

        [Fact]
        public void ToXml_SymbolTableEntry_CreatesValidXml()
        {
            // Arrange
            ISymbolTable symbolTable = CreateSymbolTable();
            ISymbolTableEntry symbolTableEntry = CreateSymbolTableEntry(symbolTable);

            // Act
            string xml = SymbolTableToXMLConverter.ToXml(symbolTableEntry);

            // Assert
            Assert.NotNull(xml);
        }

        [Fact]
        public void ToXml_SymbolTableEntry_ReturnsValidXmlForScalarType()
        {
            // Arrange
            TypeSpecProperties typeSpec = new ScalarTypeProperties<int>(0, 10);
            ISymbolTable symbolTable = CreateSymbolTable();
            ISymbolTableEntry symbolTableEntry = CreateSymbolTableEntry(symbolTable);
            symbolTableEntry.TypeSpec = new TypeSpec(TypeForm.SCALAR, null, typeSpec, null);

            // Act
            string xml = SymbolTableToXMLConverter.ToXml(symbolTableEntry);

            // Assert
            Assert.NotNull(xml);
            Assert.Contains("<TYPE", xml);
            Assert.Contains("form=\"SCALAR\"", xml);
            Assert.Contains("<MIN", xml);
            Assert.Contains("<MAX", xml);
        }

        [Fact]
        public void ToXml_SymbolTableEntry_ReturnsValidXmlForSubRangeType()
        {
            // Arrange
            TypeSpecProperties typeSpec = new SubrangeTypeProperties(0, 10);
            ISymbolTable symbolTable = CreateSymbolTable();
            ISymbolTableEntry symbolTableEntry = CreateSymbolTableEntry(symbolTable);
            symbolTableEntry.TypeSpec = new TypeSpec(TypeForm.SUBRANGE, null, typeSpec, null);

            // Act
            string xml = SymbolTableToXMLConverter.ToXml(symbolTableEntry);

            // Assert
            Assert.NotNull(xml);
            Assert.Contains("<TYPE", xml);
            Assert.Contains("form=\"SUBRANGE\"", xml);
            Assert.Contains("<MIN", xml);
            Assert.Contains("<MAX", xml);
        }

        [Fact]
        public void ToXml_SymbolTableEntry_ReturnsValidXmlForArrayType()
        {
            // Arrange
            ITypeSpec subrange = new TypeSpec(
                TypeForm.SUBRANGE,
                null,
                new SubrangeTypeProperties(1, 10),
                null);

            TypeSpecProperties typeSpec = new ArrayTypeProperties(subrange);
            ISymbolTable symbolTable = CreateSymbolTable();
            ISymbolTableEntry symbolTableEntry = CreateSymbolTableEntry(symbolTable);
            symbolTableEntry.TypeSpec = new TypeSpec(TypeForm.ARRAY, null, typeSpec, null);
            // Act
            string xml = SymbolTableToXMLConverter.ToXml(symbolTableEntry);

            // Assert
            Assert.NotNull(xml);
            Assert.Contains("<TYPE", xml);
            Assert.Contains("form=\"ARRAY\"", xml);
            Assert.Contains("<INDEX", xml);
        }

        [Fact]
        public void ToXml_SymbolTableEntry_ReturnsValidXmlForEnumerationType()
        {
           //Arrange
            TypeSpecProperties typeSpec = new EnumerationTypeProperties(new List<string>() {"RED", "BLUE", "YELLOW" });
            ISymbolTable symbolTable = CreateSymbolTable();
            ISymbolTableEntry symbolTableEntry = CreateSymbolTableEntry(symbolTable);
            symbolTableEntry.TypeSpec = new TypeSpec(TypeForm.ENUMERATION, null, typeSpec, null);
            // Act
            string xml = SymbolTableToXMLConverter.ToXml(symbolTableEntry);

            // Assert
            Assert.NotNull(xml);
            Assert.Contains("<TYPE", xml);
            Assert.Contains("form=\"ENUMERATION\"", xml);
            Assert.Contains("<ITEMS", xml);
            Assert.Contains("<ITEM>RED</ITEM>", xml);
        }

        [Fact]
        public void ToXml_SymbolTableEntry_ReturnsValidXmlForRecordType()
        {
            //Arrange
            ISymbolTable fieldsSymbolTable = new SymbolTable(MemoryScope.CUSTOM_TYPE);

            var field1 =fieldsSymbolTable.Enter("Field1");
            field1.TypeSpec = new TypeSpec(TypeForm.SCALAR);
            field1.Definition = Definition.FIELD;

            var field2=fieldsSymbolTable.Enter("Field2");
            field2.TypeSpec = new TypeSpec(TypeForm.SCALAR);
            field2.Definition = Definition.FIELD;

            ISymbolTable symbolTable = CreateSymbolTable();
            ISymbolTableEntry symbolTableEntry = CreateSymbolTableEntry(symbolTable);
            symbolTableEntry.TypeSpec = new TypeSpec(TypeForm.RECORD,null, new RecordTypeProperties(fieldsSymbolTable), null);
          
            // Act
            string xml = SymbolTableToXMLConverter.ToXml(symbolTableEntry);

            // Assert
            Assert.NotNull(xml);
            Assert.Contains("<TYPE", xml);
            Assert.Contains("form=\"RECORD\"", xml);
            Assert.Contains("<FIELDS", xml);
        }

        private ISymbolTable CreateSymbolTable()
        {
            var symbolTable = new TestedSymbolTable(MemoryScope.GLOBAL);

            var entry1 = symbolTable.Enter("variable1");
            var entry2 = symbolTable.Enter("variable2");
            return symbolTable;
        }

        private ISymbolTableEntry CreateSymbolTableEntry(ISymbolTable symTab)
        {
            var entry = new SymbolTableEntry("variable", symTab);
            entry.AppendLineNumber(10);
            return entry;
        }
        private ITypeSpec CreateTypeSpec()
        {
            ITypeSpec subrange = new TypeSpec(
              TypeForm.SUBRANGE,
              null,
              new SubrangeTypeProperties(1, 10)
,
              null);
            return subrange;
        }
    }

[Fact]
public void ToXml_SymbolTableEntry_ReturnsValidXmlForTypeWithBaseType()
{
    // Arrange
    ITypeSpec baseType = new TypeSpec(
        TypeForm.SCALAR,
        null,
        new ScalarTypeProperties<int>(0, 10),
        null);

    ISymbolTable symbolTable = CreateSymbolTable();
    ISymbolTableEntry symbolTableEntry = CreateSymbolTableEntry(symbolTable);
    symbolTableEntry.TypeSpec = new TypeSpec(TypeForm.ARRAY, baseType, null, null);

    // Act
    string xml = SymbolTableToXMLConverter.ToXml(symbolTableEntry);

    // Assert
    Assert.NotNull(xml);
    Assert.Contains("<TYPE", xml);
    Assert.Contains("form=\"ARRAY\"", xml);
    Assert.Contains("<BASE_TYPE", xml);
}

[Fact]
public void ToXml_SymbolTableEntry_ReturnsValidXmlForTypeWithoutBaseType()
{
    // Arrange
    ISymbolTable symbolTable = CreateSymbolTable();
    ISymbolTableEntry symbolTableEntry = CreateSymbolTableEntry(symbolTable);
    symbolTableEntry.TypeSpec = new TypeSpec(TypeForm.ARRAY, null, null, null);

    // Act
    string xml = SymbolTableToXMLConverter.ToXml(symbolTableEntry);

    // Assert
    Assert.NotNull(xml);
    Assert.Contains("<TYPE", xml);
    Assert.Contains("form=\"ARRAY\"", xml);
    Assert.DoesNotContain("<BASE_TYPE", xml);
}
[Fact]
public void ToXml_TypeWithMatchingSymbolNameAndIdentifier_IncludesIdAttribute()
{
    // Arrange
    ISymbolTable symbolTable = CreateSymbolTable();
    ISymbolTableEntry symbolTableEntry = CreateSymbolTableEntry(symbolTable);
    IIdentifier identifier = new Identifier("CustomType");
    symbolTableEntry.Identifier = identifier;
    symbolTableEntry.Name = "CustomType";

    // Act
    string xml = SymbolTableToXMLConverter.ToXml(symbolTableEntry.TypeSpec);

    // Assert
    Assert.NotNull(xml);
    Assert.Contains("<TYPE", xml);
    Assert.Contains("id=\"CustomType\"", xml);
}

[Fact]
public void ToXml_TypeWithDifferentSymbolNameAndIdentifier_ExcludesIdAttribute()
{
    // Arrange
    ISymbolTable symbolTable = CreateSymbolTable();
    ISymbolTableEntry symbolTableEntry = CreateSymbolTableEntry(symbolTable);
    IIdentifier identifier = new Identifier("CustomType");
    symbolTableEntry.Identifier = identifier;
    symbolTableEntry.Name = "DifferentName";

    // Act
    string xml = SymbolTableToXMLConverter.ToXml(symbolTableEntry.TypeSpec);

    // Assert
    Assert.NotNull(xml);
    Assert.Contains("<TYPE", xml);
    Assert.DoesNotContain("id=\"CustomType\"", xml);
}
private void ConvertTypePropertiesToXml(XmlWriter writer, TypeSpecProperties typeProperties, string symbolName)
{
    switch (typeProperties)
    {
        case ScalarTypeProperties scalarTypeProperties:
            ConvertScalarTypePropertiesToXml(writer, scalarTypeProperties, symbolName);
            break;
        case SubrangeTypeProperties subrangeTypeProperties:
            ConvertSubrangeTypePropertiesToXml(writer, subrangeTypeProperties, symbolName);
            break;
        case ArrayTypeProperties arrayTypeProperties:
            ConvertArrayTypePropertiesToXml(writer, arrayTypeProperties, symbolName);
            break;
        case EnumerationTypeProperties enumerationTypeProperties:
            ConvertEnumerationTypePropertiesToXml(writer, enumerationTypeProperties, symbolName);
            break;
        case RecordTypeProperties recordTypeProperties:
            ConvertRecordTypePropertiesToXml(writer, recordTypeProperties, symbolName);
            break;
        // Add more cases for other property types
    }
}

private void ConvertScalarTypePropertiesToXml(XmlWriter writer, ScalarTypeProperties scalarTypeProperties, string symbolName)
{
    writer.WriteStartElement("TYPE");
    writer.WriteAttributeString("form", scalarTypeProperties.Form.ToString().ToUpper());
    if (scalarTypeProperties.Identifier != null && symbolName == scalarTypeProperties.Identifier)
        writer.WriteAttributeString("id", scalarTypeProperties.Identifier);

    if (ShouldIncludeDetailsArea(scalarTypeProperties.Identifier, symbolName))
    {
        writer.WriteElementString("MIN_RANGE", scalarTypeProperties.MinRange.ToString());
        writer.WriteElementString("MAX_RANGE", scalarTypeProperties.MaxRange.ToString());
    }

    writer.WriteEndElement(); // Close TYPE tag
}

private void ConvertSubrangeTypePropertiesToXml(XmlWriter writer, SubrangeTypeProperties subrangeTypeProperties, string symbolName)
{
    writer.WriteStartElement("TYPE");
    writer.WriteAttributeString("form", subrangeTypeProperties.Form.ToString().ToUpper());
    if (subrangeTypeProperties.Identifier != null && symbolName == subrangeTypeProperties.Identifier)
        writer.WriteAttributeString("id", subrangeTypeProperties.Identifier);

    if (ShouldIncludeDetailsArea(subrangeTypeProperties.Identifier, symbolName))
    {
        writer.WriteElementString("MIN_RANGE", subrangeTypeProperties.MinRange.ToString());
        writer.WriteElementString("MAX_RANGE", subrangeTypeProperties.MaxRange.ToString());
    }

    writer.WriteEndElement(); // Close TYPE tag
}

private void ConvertArrayTypePropertiesToXml(XmlWriter writer, ArrayTypeProperties arrayTypeProperties, string symbolName)
{
    writer.WriteStartElement("TYPE");
    writer.WriteAttributeString("form", arrayTypeProperties.Form.ToString().ToUpper());
    if (arrayTypeProperties.Identifier != null && symbolName == arrayTypeProperties.Identifier)
        writer.WriteAttributeString("id", arrayTypeProperties.Identifier);

    if (ShouldIncludeDetailsArea(arrayTypeProperties.Identifier, symbolName))
    {
        ConvertTypePropertiesToXml(writer, arrayTypeProperties.ElementType, symbolName);

        writer.WriteStartElement("INDEX");

        foreach (var indexType in arrayTypeProperties.Index)
        {
            ConvertTypePropertiesToXml(writer, indexType, symbolName);
        }

        writer.WriteEndElement(); // Close INDEX
    }

    writer.WriteEndElement(); // Close TYPE tag
}

private void ConvertEnumerationTypePropertiesToXml(XmlWriter writer, EnumerationTypeProperties enumerationTypeProperties, string symbolName)
{
    writer.WriteStartElement("TYPE");
    writer.WriteAttributeString("form", enumerationTypeProperties.Form.ToString().ToUpper());
    if (enumerationTypeProperties.Identifier != null && symbolName == enumerationTypeProperties.Identifier)
        writer.WriteAttributeString("id", enumerationTypeProperties.Identifier);

    if (ShouldIncludeDetailsArea(enumerationTypeProperties.Identifier, symbolName))
    {
        writer.WriteStartElement("ITEMS");

        foreach (var item in enumerationTypeProperties.Items)
        {
            writer.WriteElementString("ITEM", item);
        }

        writer.WriteEndElement(); // Close ITEMS
    }

    writer.WriteEndElement(); // Close TYPE tag
}

private void ConvertRecordTypePropertiesToXml(XmlWriter writer, RecordTypeProperties recordTypeProperties, string symbolName)
{
    writer.WriteStartElement("TYPE");
    writer.WriteAttributeString("form", recordTypeProperties.Form.ToString().ToUpper());
    if (recordTypeProperties.Identifier != null && symbolName == recordTypeProperties.Identifier)
        writer.WriteAttributeString("id", recordTypeProperties.Identifier);

    if (ShouldIncludeDetailsArea(recordTypeProperties.Identifier, symbolName))
    {
        writer.WriteStartElement("FIELDS");

        foreach (var field in recordTypeProperties.Fields)
        {
            writer.WriteStartElement("FIELD");
            writer.WriteAttributeString("name", field.Item1);
            ConvertTypePropertiesToXml(writer, field.Item2, symbolName);
            writer.WriteEndElement(); // Close FIELD
        }

        writer.WriteEndElement(); // Close FIELDS
    }

    writer.WriteEndElement(); // Close TYPE tag
}

private bool ShouldIncludeDetailsArea(string typeIdentifier, string symbolName)
{
    return typeIdentifier == null || typeIdentifier == symbolName;
}

public class SymbolTableToXMLConverterTests
{
    // Other existing tests...

    [Fact]
    public void ConvertTypeSpecToXml_WithNullTypeIdentifier_ShouldIncludeDetailsArea()
    {
        // Arrange
        var xmlBuilder = new StringBuilder();
        var xmlWriter = XmlWriter.Create(xmlBuilder, new XmlWriterSettings { OmitXmlDeclaration = true, Indent = true });
        var typeSpec = new Mock<ITypeSpec>();
        typeSpec.SetupGet(t => t.Identifier).Returns((Symbol)null); // Null type identifier

        // Act
        SymbolTableToXMLConverter.ConvertTypeSpecToXml(xmlWriter, typeSpec.Object, "symbolName");

        // Assert
        Assert.Contains("<TYPE", xmlBuilder.ToString()); // TYPE element should be included
    }

    [Fact]
    public void ConvertTypeSpecToXml_WithMatchingTypeIdentifierAndSymbolName_ShouldIncludeDetailsArea()
    {
        // Arrange
        var xmlBuilder = new StringBuilder();
        var xmlWriter = XmlWriter.Create(xmlBuilder, new XmlWriterSettings { OmitXmlDeclaration = true, Indent = true });
        var typeIdentifier = new Symbol("symbolName");
        var typeSpec = new Mock<ITypeSpec>();
        typeSpec.SetupGet(t => t.Identifier).Returns(typeIdentifier);

        // Act
        SymbolTableToXMLConverter.ConvertTypeSpecToXml(xmlWriter, typeSpec.Object, "symbolName");

        // Assert
        Assert.Contains("<TYPE", xmlBuilder.ToString()); // TYPE element should be included
    }

    [Fact]
    public void ConvertTypeSpecToXml_WithDifferentTypeIdentifierAndSymbolName_ShouldNotIncludeDetailsArea()
    {
        // Arrange
        var xmlBuilder = new StringBuilder();
        var xmlWriter = XmlWriter.Create(xmlBuilder, new XmlWriterSettings { OmitXmlDeclaration = true, Indent = true });
        var typeIdentifier = new Symbol("differentName");
        var typeSpec = new Mock<ITypeSpec>();
        typeSpec.SetupGet(t => t.Identifier).Returns(typeIdentifier);

        // Act
        SymbolTableToXMLConverter.ConvertTypeSpecToXml(xmlWriter, typeSpec.Object, "symbolName");

        // Assert
        Assert.DoesNotContain("<TYPE", xmlBuilder.ToString()); // TYPE element should not be included
    }
}

