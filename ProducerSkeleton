using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection.Emit;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace MacroRunner.Backend.Compiler.Code
{
    public class CodeProducer : ILister, ICodeProducer
    {
        public ILister Parent { get; set; }
        private List<string> listingBuilder;
        private AssemblyBuilder builder;
        public AssemblyName AssemblyName { get; }

        public CodeProducer(string name)
        {
            listingBuilder = new List<string>();
            this.AssemblyName = new AssemblyName(name);
            builder = AssemblyBuilder.DefineDynamicAssembly(AssemblyName, AssemblyBuilderAccess.RunAndCollect);
        }
        public CodeProducer(AssemblyBuilder assemblyBuilder)
        {
            listingBuilder = new List<string>();
            builder = assemblyBuilder;
        }      

        public void AddIntoListing(string content)
        {
            listingBuilder.Add(content);
            Parent?.AddIntoListing(content);
        }

        public ModuleProducer DefineModule(string name)
        {
            return new ModuleProducer(builder.DefineDynamicModule(name));
        }

        public Assembly ToAssembly()
        {
            return AssemblyBuilder.Load(this.assemblyName);
        }

        public string ToListing()
        {
            return string.Join(Environment.NewLine, listingBuilder);
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection.Emit;
using System.Text;
using System.Threading.Tasks;

namespace MacroRunner.Backend.Compiler.Code
{
    public class ILProducer: ILister, ICodeProducer
    {
        public ILister Parent { get; set; }
        private ILGenerator generator;

        public ILProducer(ILGenerator ilGenerator)
        {
            generator = ilGenerator;
        }

        public void AddIntoListing(string content)
        {
            Parent?.AddIntoListing(content);
        }

        public void Emit(OpCode opcode)
        {
            generator.Emit(opcode);
        }
      
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection.Emit;
using System.Text;
using System.Threading.Tasks;

namespace MacroRunner.Backend.Compiler.Code
{
    public class MethodProducer
    {
        public ILister Parent { get; set; }
        private MethodBuilder builder;

      
        public MethodProducer(MethodBuilder methodBuilder)
        {
            builder = methodBuilder;
        }

        public void AddIntoListing(string content)
        {
            Parent?.AddIntoListing(content);
        }

        public ILProducer GetILProducer()
        {
            return new ILProducer(builder.GetILGenerator());
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Reflection.Emit;
using System.Text;
using System.Threading.Tasks;

namespace MacroRunner.Backend.Compiler.Code
{
    public class ModuleProducer: ILister, ICodeProducer
    {
        public ILister Parent { get; set; }
        private ModuleBuilder builder;

        public ModuleProducer(ModuleBuilder moduleBuilder)
        {
            builder = moduleBuilder;
        }

        public void AddIntoListing(string content)
        {
            Parent?.AddIntoListing(content);
        }      

        public TypeProducer DefineType(string name)
        {
            return new TypeProducer(builder.DefineType(name));
        }

        public Assembly GetAssembly()
        {
            return builder.Assembly;
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection.Emit;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace MacroRunner.Backend.Compiler.Code
{
    public class TypeProducer: ILister, ICodeProducer
    {
        public ILister Parent { get; set; }
        private TypeBuilder builder;

      
        public TypeProducer(TypeBuilder typeBuilder)
        {
            builder = typeBuilder;
        }

        public void AddIntoListing(string content)
        {
            Parent?.AddIntoListing(content);
        }       

        public void AddInterfaceImplementation(Type interfaceType)
        {
            builder.AddInterfaceImplementation(interfaceType);
        }

        public MethodProducer DefineMethod(string name, MethodAttributes attributes, Type returnType, Type[] parameterTypes)
        {
            return new MethodProducer(builder.DefineMethod(name, attributes, returnType, parameterTypes));
        }
    }
}
