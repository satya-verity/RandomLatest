using System.IO;
using System.Text;
using System.Xml.Linq;
using Moq;
using OCLCMacroLanguage.Frontend.SemanticAnalyzer;
using OCLCMacroLanguage.Frontend.SemanticAnalyzer.ASTBuilder;
using OCLCMacroLanguage.Frontend.SemanticAnalyzer.ASTBuilder.TypeProperties;
using Xunit;

namespace OCLCMacroLanguage.Frontend.SemanticAnalyzer.Tests
{
    public class AstToXmlConverterVerificationTests
    {
        [Fact]
        public void ConvertToXml_VerifyXmlStructure()
        {
            // Arrange
            var astFactory = new AstFactory();
            var astNodeFactory = new AstNodeFactory();
            var astToXmlConverter = new AstToXmlConverter();

            // Create AST structure to match the provided XML
            var integerConstantNode = astNodeFactory.CreateNode(AstNodeType.INTEGER_CONSTANT);
            integerConstantNode.Properties = new AstNodeProperties(1, null, null, null);
            integerConstantNode.Properties.Value = Mock.Of<ISymbolTableEntry>();
            integerConstantNode.Properties.Value.Name = "1";
            integerConstantNode.Properties.Value.LineNumbers = new[] { 4 };

            var realConstantNode = astNodeFactory.CreateNode(AstNodeType.REAL_CONSTANT);
            realConstantNode.Properties = new AstNodeProperties(1, null, null, null);
            realConstantNode.Properties.Value = Mock.Of<ISymbolTableEntry>();
            realConstantNode.Properties.Value.Name = "3.14";
            realConstantNode.Properties.Value.LineNumbers = new[] { 4 };

            var subscriptNode = astNodeFactory.CreateNode(AstNodeType.SUBSCRIPTS);
            subscriptNode.Properties = new AstNodeProperties(1, null, null, null);
            subscriptNode.AddChild(integerConstantNode);

            var variableNode = astNodeFactory.CreateNode(AstNodeType.VARIABLE);
            variableNode.Properties = new AstNodeProperties(1, null, null, null);
            variableNode.Properties.Id = Mock.Of<ISymbolTableEntry>();
            variableNode.Properties.Id.Name = "A";
            variableNode.Properties.Id.LineNumbers = new[] { 4 };
            variableNode.Properties.Id.SymbolTable = Mock.Of<ISymbolTable>();
            variableNode.Properties.Id.SymbolTable.Scope = MemoryScope.PROCEDURE;
            variableNode.TypeSpec = Mock.Of<ITypeSpec>();
            variableNode.TypeSpec.Form = TypeForm.DOUBLE;
            variableNode.AddChild(subscriptNode);

            var convertNode = astNodeFactory.CreateNode(AstNodeType.CONVERT);
            convertNode.Properties = new AstNodeProperties(1, null, null, null);
            convertNode.TypeSpec = Mock.Of<ITypeSpec>();
            convertNode.TypeSpec.Form = TypeForm.DOUBLE;
            convertNode.AddChild(realConstantNode);

            var assignNode = astNodeFactory.CreateNode(AstNodeType.ASSIGN);
            assignNode.Properties = new AstNodeProperties(1, null, null, null);
            assignNode.TypeSpec = Mock.Of<ITypeSpec>();
            assignNode.TypeSpec.Form = TypeForm.DOUBLE;
            assignNode.AddChild(variableNode);
            assignNode.AddChild(convertNode);

            var programNode = astNodeFactory.CreateNode(AstNodeType.PROGRAM);
            programNode.Properties = new AstNodeProperties(1, null, null, null);
            programNode.Properties.Id = Mock.Of<ISymbolTableEntry>();
            programNode.Properties.Id.Name = "QuickBasicProgram";
            programNode.Properties.Id.SymbolTable = Mock.Of<ISymbolTable>();
            programNode.Properties.Id.SymbolTable.Scope = MemoryScope.MODULE;
            programNode.Properties.Id.LineNumbers = new[] { 1 };
            programNode.AddChild(assignNode);

            var ast = astFactory.CreateAst(programNode);

            // Act
            var xml = astToXmlConverter.ConvertToXml(ast);

            // Assert
            var expectedXml = "<PROGRAM id=\"QuickBasicProgram\" scope=\"MODULE\" line=\"1\">" +
                                "<ASSIGN line=\"4\" type_id=\"double\">" +
                                    "<VARIABLE id=\"A\" scope=\"PROCEDURE\" type_id=\"double\">" +
                                        "<SUBSCRIPTS type_id=\"double\">" +
                                            "<INTEGER_CONSTANT value=\"1\" type_id=\"integer\" />" +
                                        "</SUBSCRIPTS>" +
                                    "</VARIABLE>" +
                                    "<CONVERT type_id=\"double\">" +
                                        "<REAL_CONSTANT value=\"3.14\" type_id=\"single\" />" +
                                    "</CONVERT>" +
                                "</ASSIGN>" +
                              "</PROGRAM>";

            var expectedXElement = XElement.Parse(expectedXml);
            var actualXElement = XElement.Parse(xml);

            Assert.Equal(expectedXElement.ToString(), actualXElement.ToString());
        }
    }
}
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Xml;
using Moq;
using OCLCMacroLanguage.Frontend.SemanticAnalyzer;
using OCLCMacroLanguage.Frontend.SemanticAnalyzer.ASTBuilder;
using OCLCMacroLanguage.Frontend.SemanticAnalyzer.ASTBuilder.TypeProperties;
using OCLCMacroLanguage.Frontend.SemanticAnalyzer.OMLSymbolTable;
using Xunit;

namespace OCLCMacroLanguage.Frontend.SemanticAnalyzer.ASTBuilder.Tests
{
    public class AstToXmlConverterTests
    {
        // ... (previous tests)

        [Fact]
        public void ConvertNodeToXml_WithSubscripts_WritesSubscripts()
        {
            // Arrange
            var converter = new AstToXmlConverter();
            var writerMock = new Mock<XmlWriter>();
            var astNodeMock = new Mock<IAstNode>();
            astNodeMock.SetupGet(node => node.Type).Returns(AstNodeType.VARIABLE);

            var subscriptMock = new Mock<IAstNode>();
            subscriptMock.SetupGet(node => node.Type).Returns(AstNodeType.SUBSCRIPTS);
            astNodeMock.SetupGet(node => node.Children).Returns(new List<IAstNode> { subscriptMock.Object });

            // Act
            converter.ConvertNodeToXml(writerMock.Object, astNodeMock.Object);

            // Assert
            writerMock.Verify(w => w.WriteStartElement("VARIABLE"));
            writerMock.Verify(w => w.WriteStartElement("SUBSCRIPTS"));
            writerMock.Verify(w => w.WriteEndElement());
            writerMock.Verify(w => w.WriteEndElement());
        }

        [Fact]
        public void ConvertNodeToXml_WithArrayProperties_WritesArrayProperties()
        {
            // Arrange
            var converter = new AstToXmlConverter();
            var writerMock = new Mock<XmlWriter>();
            var astNodeMock = new Mock<IAstNode>();
            astNodeMock.SetupGet(node => node.Type).Returns(AstNodeType.VARIABLE);

            var arrayTypePropertiesMock = new Mock<ArrayTypeProperties>(5, ValueElementType.INTEGER);
            var typeSpecMock = new Mock<ITypeSpec>();
            typeSpecMock.SetupGet(t => t.Form).Returns(TypeForm.ARRAY);
            typeSpecMock.SetupGet(t => t.Properties).Returns(arrayTypePropertiesMock.Object);
            astNodeMock.SetupGet(node => node.TypeSpec).Returns(typeSpecMock.Object);

            // Act
            converter.ConvertNodeToXml(writerMock.Object, astNodeMock.Object);

            // Assert
            writerMock.Verify(w => w.WriteStartElement("VARIABLE"));
            writerMock.Verify(w => w.WriteAttributeString("type_id", "ARRAY"));
            writerMock.Verify(w => w.WriteAttributeString("size", "5"));
            writerMock.Verify(w => w.WriteAttributeString("element_type", "INTEGER"));
            writerMock.Verify(w => w.WriteEndElement());
        }

        [Fact]
        public void ConvertToXml_WithSymbolTableEntry_ReturnsXmlWithSymbolTableEntryInfo()
        {
            // Arrange
            var symbolTableEntryMock = new Mock<ISymbolTableEntry>();
            symbolTableEntryMock.SetupGet(entry => entry.Name).Returns("VariableA");
            symbolTableEntryMock.SetupGet(entry => entry.SymbolTable).Returns(new Mock<ISymbolTable>().Object);

            var astNodeMock = new Mock<IAstNode>();
            astNodeMock.SetupGet(node => node.Type).Returns(AstNodeType.VARIABLE);
            astNodeMock.SetupGet(node => node.Properties).Returns(new AstNodeProperties(1, symbolTableEntryMock.Object));

            var astMock = new Mock<IAst>();
            astMock.SetupGet(ast => ast.Root).Returns(astNodeMock.Object);

            var converter = new AstToXmlConverter();

            // Act
            var result = converter.ConvertToXml(astMock.Object);

            // Assert
            Assert.Contains("id=\"VariableA\"", result);
            Assert.Contains("scope=\"UNDEFINED\"", result); // Assuming default behavior for SymbolTable
        }

        [Fact]
        public void ConvertNodeToXml_WithSymbolTableEntry_WritesSymbolTableEntryInfo()
        {
            // Arrange
            var converter = new AstToXmlConverter();
            var writerMock = new Mock<XmlWriter>();

            var symbolTableEntryMock = new Mock<ISymbolTableEntry>();
            symbolTableEntryMock.SetupGet(entry => entry.Name).Returns("VariableA");
            symbolTableEntryMock.SetupGet(entry => entry.SymbolTable).Returns(new Mock<ISymbolTable>().Object);

            var astNodeMock = new Mock<IAstNode>();
            astNodeMock.SetupGet(node => node.Type).Returns(AstNodeType.VARIABLE);
            astNodeMock.SetupGet(node => node.Properties).Returns(new AstNodeProperties(1, symbolTableEntryMock.Object));

            // Act
            converter.ConvertNodeToXml(writerMock.Object, astNodeMock.Object);

            // Assert
            writerMock.Verify(w => w.WriteStartElement("VARIABLE"));
            writerMock.Verify(w => w.WriteAttributeString("id", "VariableA"));
            writerMock.Verify(w => w.WriteAttributeString("scope", "UNDEFINED"));
            writerMock.Verify(w => w.WriteEndElement());
        }

        [Fact]
        public void ConvertNodeToXml_WithRecordType_WritesRecordFields()
        {
            // Arrange
            var converter = new AstToXmlConverter();
            var writerMock = new Mock<XmlWriter>();

            var enumerationTypePropertiesMock = new Mock<EnumerationTypeProperties>(new List<string> { "OptionA", "OptionB" });
            var typeSpecMock = new Mock<ITypeSpec>();
            typeSpecMock.SetupGet(t => t.Form).Returns(TypeForm.ENUMERATION);
            typeSpecMock.SetupGet(t => t.Properties).Returns(enumerationTypePropertiesMock.Object);

            var astNodeMock = new Mock<IAstNode>();
            astNodeMock.SetupGet(node => node.Type).Returns(AstNodeType.VARIABLE);
            astNodeMock.SetupGet(node => node.TypeSpec).Returns(typeSpecMock.Object);

            // Act
            converter.ConvertNodeToXml(writerMock.Object, astNodeMock.Object);

            // Assert
            writerMock.Verify(w => w.WriteStartElement("VARIABLE"));
            writerMock.Verify(w => w.WriteAttributeString("type_id", "ENUMERATION"));
            writerMock.Verify(w => w.WriteStartElement("ENUMERATION_TYPE"));
            writerMock.Verify(w => w.WriteStartElement("CONSTANT"));
            writerMock.Verify(w => w.WriteAttributeString("value", "OptionA"));
            writerMock.Verify(w => w.WriteEndElement());
            writerMock.Verify(w => w.WriteStartElement("CONSTANT"));
            writerMock.Verify(w => w.WriteAttributeString("value", "OptionB"));
            writerMock.Verify(w => w.WriteEndElement());
            writerMock.Verify(w => w.WriteEndElement());
            writerMock.Verify(w => w.WriteEndElement());
        }

        [Fact]
        public void ConvertNodeToXml_WithSubrangeType_WritesSubrangeAttributes()
        {
            // Arrange
            var converter = new AstToXmlConverter();
            var writerMock = new Mock<XmlWriter>();

            var subrangeTypePropertiesMock = new Mock<SubrangeTypeProperties>(1, 10);
            var typeSpecMock = new Mock<ITypeSpec>();
            typeSpecMock.SetupGet(t => t.Form).Returns(TypeForm.SUBRANGE);
            typeSpecMock.SetupGet(t => t.Properties).Returns(subrangeTypePropertiesMock.Object);

            var astNodeMock = new Mock<IAstNode>();
            astNodeMock.SetupGet(node => node.Type).Returns(AstNodeType.VARIABLE);
            astNodeMock.SetupGet(node => node.TypeSpec).Returns(typeSpecMock.Object);

            // Act
            converter.ConvertNodeToXml(writerMock.Object, astNodeMock.Object);

            // Assert
            writerMock.Verify(w => w.WriteStartElement("VARIABLE"));
            writerMock.Verify(w => w.WriteAttributeString("type_id", "SUBRANGE"));
            writerMock.Verify(w => w.WriteAttributeString("min_range", "1"));
            writerMock.Verify(w => w.WriteAttributeString("max_range", "10"));
            writerMock.Verify(w => w.WriteEndElement());
        }

        // Add more tests as needed to cover different scenarios and branches in your code.
    }
}
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Xml;
using Moq;
using OCLCMacroLanguage.Frontend.SemanticAnalyzer;
using OCLCMacroLanguage.Frontend.SemanticAnalyzer.ASTBuilder;
using Xunit;

namespace OCLCMacroLanguage.Frontend.SemanticAnalyzer.ASTBuilder.Tests
{
    public class AstToXmlConverterTests
    {
        [Fact]
        public void ConvertToXml_WithNullAst_ReturnsEmptyString()
        {
            // Arrange
            var converter = new AstToXmlConverter();

            // Act
            var result = converter.ConvertToXml(null);

            // Assert
            Assert.Empty(result);
        }

        [Fact]
        public void ConvertToXml_WithAst_ReturnsExpectedXml()
        {
            // Arrange
            var astNodeMock = new Mock<IAstNode>();
            astNodeMock.SetupGet(node => node.Type).Returns(AstNodeType.PROGRAM);
            astNodeMock.SetupGet(node => node.Children).Returns(new List<IAstNode>());

            var astMock = new Mock<IAst>();
            astMock.SetupGet(ast => ast.Root).Returns(astNodeMock.Object);

            var converter = new AstToXmlConverter();

            // Act
            var result = converter.ConvertToXml(astMock.Object);

            // Assert
            Assert.Contains("<PROGRAM", result);
            Assert.Contains("</PROGRAM>", result);
        }

        [Fact]
        public void ConvertNodeToXml_WithNullNode_DoesNotThrowException()
        {
            // Arrange
            var converter = new AstToXmlConverter();
            var writerMock = new Mock<XmlWriter>();

            // Act and Assert
            Assert.DoesNotThrow(() => converter.ConvertNodeToXml(writerMock.Object, null));
        }

        [Fact]
        public void ConvertNodeToXml_WithNodeAndProperties_WritesAttributes()
        {
            // Arrange
            var converter = new AstToXmlConverter();
            var writerMock = new Mock<XmlWriter>();
            var propertiesMock = new Mock<AstNodeProperties>();
            propertiesMock.SetupGet(p => p.Id).Returns(new Mock<ISymbolTableEntry>().Object);
            propertiesMock.SetupGet(p => p.Value).Returns(new Mock<ISymbolTableEntry>().Object);
            propertiesMock.SetupGet(p => p.Line).Returns(42);

            var astNodeMock = new Mock<IAstNode>();
            astNodeMock.SetupGet(node => node.Type).Returns(AstNodeType.VARIABLE);
            astNodeMock.SetupGet(node => node.Properties).Returns(propertiesMock.Object);

            // Act
            converter.ConvertNodeToXml(writerMock.Object, astNodeMock.Object);

            // Assert
            writerMock.Verify(w => w.WriteStartElement("VARIABLE"));
            propertiesMock.Verify(p => p.Id, Times.Once);
            propertiesMock.Verify(p => p.Value, Times.Once);
            propertiesMock.Verify(p => p.Line, Times.Once);
            writerMock.Verify(w => w.WriteAttributeString("id", It.IsAny<string>()), Times.Once);
            writerMock.Verify(w => w.WriteAttributeString("scope", It.IsAny<string>()), Times.Once);
            writerMock.Verify(w => w.WriteAttributeString("value", It.IsAny<string>()), Times.Once);
            writerMock.Verify(w => w.WriteAttributeString("line", It.IsAny<string>()), Times.Once);
            writerMock.Verify(w => w.WriteEndElement(), Times.Once);
        }

        [Fact]
        public void ConvertNodeToXml_WithTypeSpec_WritesTypeIdAttribute()
        {
            // Arrange
            var converter = new AstToXmlConverter();
            var writerMock = new Mock<XmlWriter>();
            var typeSpecMock = new Mock<ITypeSpec>();
            typeSpecMock.SetupGet(t => t.Form).Returns(TypeForm.SCALAR);

            var astNodeMock = new Mock<IAstNode>();
            astNodeMock.SetupGet(node => node.Type).Returns(AstNodeType.VARIABLE);
            astNodeMock.SetupGet(node => node.TypeSpec).Returns(typeSpecMock.Object);

            // Act
            converter.ConvertNodeToXml(writerMock.Object, astNodeMock.Object);

            // Assert
            writerMock.Verify(w => w.WriteStartElement("VARIABLE"));
            writerMock.Verify(w => w.WriteAttributeString("type_id", "SCALAR"));
            writerMock.Verify(w => w.WriteEndElement());
        }

        [Fact]
        public void ConvertToXml_WithMultipleChildren_ReturnsXmlWithAllElements()
        {
            // Arrange
            var child1Mock = new Mock<IAstNode>();
            child1Mock.SetupGet(node => node.Type).Returns(AstNodeType.ASSIGN);

            var child2Mock = new Mock<IAstNode>();
            child2Mock.SetupGet(node => node.Type).Returns(AstNodeType.LOOP);

            var astNodeMock = new Mock<IAstNode>();
            astNodeMock.SetupGet(node => node.Type).Returns(AstNodeType.PROGRAM);
            astNodeMock.SetupGet(node => node.Children).Returns(new List<IAstNode> { child1Mock.Object, child2Mock.Object });

            var astMock = new Mock<IAst>();
            astMock.SetupGet(ast => ast.Root).Returns(astNodeMock.Object);

            var converter = new AstToXmlConverter();

            // Act
            var result = converter.ConvertToXml(astMock.Object);

            // Assert
            Assert.Contains("<ASSIGN", result);
            Assert.Contains("<LOOP", result);
        }
    }
}
using System.Collections.Generic;
using System.Xml;
using Moq;
using Xunit;

namespace OCLCMacroLanguage.Frontend.SemanticAnalyzer.ASTBuilder.Tests
{
    public class AstToXmlConverterTests
    {
        [Fact]
        public void ConvertToXml_WithNullAst_ReturnsEmptyString()
        {
            // Arrange
            var converter = new AstToXmlConverter();

            // Act
            var result = converter.ConvertToXml(null);

            // Assert
            Assert.Empty(result);
        }

        [Fact]
        public void ConvertToXml_WithAst_ReturnsExpectedXml()
        {
            // Arrange
            var astNodeMock = new Mock<IAstNode>();
            astNodeMock.SetupGet(node => node.Type).Returns(AstNodeType.PROGRAM);
            astNodeMock.SetupGet(node => node.Children).Returns(new List<IAstNode>());

            var astMock = new Mock<IAst>();
            astMock.SetupGet(ast => ast.Root).Returns(astNodeMock.Object);

            var converter = new AstToXmlConverter();

            // Act
            var result = converter.ConvertToXml(astMock.Object);

            // Assert
            Assert.Contains("<PROGRAM", result);
            Assert.Contains("</PROGRAM>", result);
        }

        [Fact]
        public void ConvertNodeToXml_WithNullNode_DoesNotThrowException()
        {
            // Arrange
            var converter = new AstToXmlConverter();
            var writerMock = new Mock<XmlWriter>();

            // Act and Assert
            Assert.DoesNotThrow(() => converter.ConvertNodeToXml(writerMock.Object, null));
        }
    }
}
