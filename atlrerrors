Line: 75 Column: 23 Syntax Error: no viable alternative at input 'Option Compare Text\nOption Explicit\n\n\n\nSub Main\n\nDim CS As Object\nOn Error Resume Next\nSet CS = GetObject( , "Connex.Client" )\nOn Error GoTo 0\nIf CS Is Nothing Then Set CS = CreateObject( "Connex.Client" )\n\nConst CHECKED As Integer = 1\nConst CRITICAL_MESSAGE As Integer = 16\nConst DLG_STATEMENT_CANCEL As Integer = 102\nConst DISPLAY_FF_AT_TOP As Integer = 1\nConst INFORMATION_MESSAGE As Integer = 64\n\nConst CTRY_CODE As Integer = 0\nConst GAC_CODE As Integer = 1\n\nConst EQUAL_TO As Integer = 0\nConst GREATER_THAN As Integer = 1\nConst LESS_THAN As Integer = -1\n\nDim DELIMITER As String*'
Line: 45 Column: 23 Syntax Error: no viable alternative at input 'Option Explicit\n\n\n\nSub Main\n\nDim CS As Object\nOn Error Resume Next\nSet CS = GetObject( , "Connex.Client" )\nOn Error GoTo 0\nIf CS Is Nothing Then Set CS = CreateObject( "Connex.Client" )\n\nConst CRITICAL_MESSAGE As Integer = 16\nConst DISPLAY_FF_AT_TOP As Integer = 1\nConst WARNING_MESSAGE As Integer = 48\n\nDim DELIMITER As String*'
Line: 50 Column: 23 Syntax Error: no viable alternative at input 'Option Explicit\n\n\n\nSub Main\n\nDim CS As Object\nOn Error Resume Next\nSet CS = GetObject( , "Connex.Client" )\nOn Error GoTo 0\nIf CS Is Nothing Then Set CS = CreateObject( "Connex.Client" )\n\nConst CRITICAL_MESSAGE As Integer = 16\nConst DIALOG_BUTTON_CANCEL As Integer = 0\nConst DISPLAY_FF_AT_TOP As Integer = 1\nConst KEEP_CODE As Integer = 1\n\nDim DELIMITER As String*'
Line: 64 Column: 26 Syntax Error: no viable alternative at input 'String*'
Line: 48 Column: 33 Syntax Error: no viable alternative at input 'Option Explicit\n\n\n\nSub Main\n\nDim CS As Object\nOn Error Resume Next\nSet CS = GetObject( , "Connex.Client" )\nOn Error GoTo 0\nIf CS Is Nothing Then Set CS = CreateObject( "Connex.Client" )\n\nConst CRITICAL_MESSAGE As Integer = 16\nConst INFORMATION_MESSAGE As Integer = 64\n\nDim ChangeMade%\nDim CharT\nDim𝐶𝑜𝑙\nDim���\nDim FieldData$\nDim LenFieldDataString%\nDim MULTIPLICATION_SIGN As String*'
Line: 40 Column: 23 Syntax Error: no viable alternative at input 'Option Explicit\nOption Compare Text\n\n\n\nSub Main\n\nDim CS As Object\nOn Error Resume Next\nSet CS = GetObject( , "Connex.Client" )\nOn Error GoTo 0\nIf CS Is Nothing Then Set CS = CreateObject( "Connex.Client" )\n\nConst CRITICAL_MESSAGE As Integer = 16\nConst DISPLAY_FF_AT_TOP As Integer = 1\nConst INFORMATION_MESSAGE As Integer = 64\n\nDim DELIMITER As String*'
Line: 36 Column: 18 Syntax Error: no viable alternative at input 'Option Explicit\n\n\n\nSub Main\n\nConst INFORMATION_MESSAGE As Integer = 64\nConst CRITICAL_MESSAGE As Integer = 16\n\nDim CS As Object\nOn Error Resume Next\nSet CS = GetObject( , "Connex.Client" )\nOn Error GoTo 0\nIf CS Is Nothing Then Set CS = CreateObject( "Connex.Client" )\n\nDim CRLF As String*'
Line: 43 Column: 26 Syntax Error: no viable alternative at input 'Option Explicit\n\n\n\nSub Main\n\nDim CS As Object\nOn Error Resume Next\nSet CS = GetObject( , "Connex.Client" )\nOn Error GoTo 0\nIf CS Is Nothing Then Set CS = CreateObject( "Connex.Client" )\n\nConst CRITICAL_MESSAGE As Integer = 16\nConst DIALOG_BUTTON_CANCEL As Integer = 102\nConst INFORMATION_MESSAGE As Integer = 64\n\nConst MAX_LENGTH_OCLCCN As Integer = 10\nConst MAX_LENGTH_INPUT_STRING As Integer = 32\n\nDim DOUBLE_QUOTE As String*'
Line: 62 Column: 26 Syntax Error: no viable alternative at input 'Option Explicit\n\n\n\nSub Main\n\nDim CS As Object\nOn Error Resume Next\nSet CS = GetObject( , "Connex.Client" )\nOn Error GoTo 0\nIf CS Is Nothing Then Set CS = CreateObject( "Connex.Client" )\n\nConst CRITICAL_MESSAGE As Integer = 16\nConst INFORMATION_MESSAGE As Integer = 64\n\nDim CurrentCol%\nDim CurrentRow%\nDim DOUBLE_QUOTE As String*'
Line: 34 Column: 36 Syntax Error: no viable alternative at input 'Option Explicit\n\nType FieldContents\n tCaptureAndStorage As String*'
Line: 92 Column: 23 Syntax Error: no viable alternative at input 'Option Explicit\n\n\n\nSub Main\n\nDim CS As Object\nOn Error Resume Next\nSet CS = GetObject( , "Connex.Client" )\nOn Error GoTo 0\nIf CS Is Nothing Then Set CS = CreateObject( "Connex.Client" )\n\nConst CASE_INSENSITIVE As Integer = 1\nConst CRITICAL_MESSAGE As Integer = 16\n \nConst INFORMATION_MESSAGE As Integer = 64\nConst DISPLAY_FF_AT_TOP As Integer = 1\n\nConst CARTRIDGE As Integer = 6\nConst CONTAINER As Integer = 3\nConst DISC As Integer = 2\nConst ONLINE As Integer = 4\nConst OTHER As Integer = 5\nConst VOLUME As Integer = 1\n\nDim DELIMITER As String*'
Line: 121 Column: 32 Syntax Error: no viable alternative at input 'Option Explicit\n\nDeclare Sub InitialDialogSetup ('
Line: 116 Column: 37 Syntax Error: no viable alternative at input 'Option Compare Text\nOption Explicit\n\nDeclare Function AddPunctuation ('
Line: 68 Column: 34 Syntax Error: no viable alternative at input 'Option Compare Text\nOption Explicit\n\nDeclare Sub FillCodesAndTermsArray\n'
Line: 58 Column: 31 Syntax Error: no viable alternative at input 'Option Explicit\n\nDeclare Sub FillDialogBoxArrays('
Line: 87 Column: 26 Syntax Error: no viable alternative at input 'Option Explicit\n\nDeclare Function Normalize('
Line: 133 Column: 32 Syntax Error: no viable alternative at input 'Option Explicit\n\nDeclare Sub ClearShortcutDisplay\n'
Line: 56 Column: 28 Syntax Error: no viable alternative at input 'Option Explicit\n\nDeclare Sub Arrange006Fields('
Line: 30 Column: 22 Syntax Error: no viable alternative at input 'Option Explicit\n\nDeclare Sub FillArrays\n'
Line: 30 Column: 22 Syntax Error: no viable alternative at input 'Option Explicit\n\nDeclare Sub FillArrays\n'
Line: 72 Column: 31 Syntax Error: no viable alternative at input 'Option Compare Text\nOption Explicit\n\nDeclare Sub MatchNamesToCodes ('
Line: 101 Column: 28 Syntax Error: no viable alternative at input 'Option Explicit\n\nDeclare Sub FillCharDatabase\n'
Line: 27 Column: 24 Syntax Error: no viable alternative at input 'Option Explicit\n\nDeclare Sub SetDialogBox('
Line: 24 Column: 39 Syntax Error: no viable alternative at input 'Option Explicit\n\nDeclare Function Dialog1ControlFunction('
Line: 78 Column: 45 Syntax Error: no viable alternative at input 'Option Explicit\n\nDeclare Function NoOptionButtonsDialogBox As'
Line: 39 Column: 39 Syntax Error: no viable alternative at input 'Option Explicit\n\nDeclare Function Dialog1ControlFunction('
Line: 52 Column: 29 Syntax Error: no viable alternative at input 'Option Explicit\n\nDeclare Sub DialogBoxControls('
Line: 39 Column: 26 Syntax Error: no viable alternative at input 'Option Explicit\n\nDeclare Sub CategoryChange\n'
Line: 70 Column: 21 Syntax Error: no viable alternative at input 'Option Explicit\n\nDeclare Sub FillArray\n'
Line: 102 Column: 41 Syntax Error: no viable alternative at input 'Option Explicit\n\n\n\nSub Main\n\n\n\n\n \nDim CopyFixedField : CopyFixedField = TRUE\n \n\n\nDim CS As Object\nOn Error Resume Next\nSet CS = GetObject( , "Connex.Client" )\nOn Error GoTo 0\nIf CS Is Nothing Then Set CS = CreateObject( "Connex.Client" )\n\nConst CRITICAL_MESSAGE As Integer = 16\nConst MSGBOX_RETURN_CANCEL As Integer = 2\n\nDim CurrentWindowTitle\nDim𝑁𝑒𝑤𝑊𝑖𝑛𝑑𝑜𝑤𝑇𝑖𝑡𝑙𝑒\nDim��������������\nDim OriginalWindowTitle\nDim𝑇𝑦𝑝𝑒𝑂𝑓𝑊𝑖𝑛𝑑𝑜𝑤\nDim������������ : WaltsMacros="[𝑊𝑎𝑙𝑡𝑠𝑀𝑎𝑐𝑟𝑜𝑠]𝐸𝑥𝑡𝑟𝑎𝑠2:𝐶𝑜𝑝𝑦𝐴𝑛𝑑𝐶𝑙𝑜𝑠𝑒"\nDim𝑊𝑖𝑛𝑑𝑜𝑤𝐶𝑜𝑢𝑛𝑡="[�����������]������2:������������"\nDim�����������\n Exit Sub\nEnd Select\n\n\n\n\n\nIf CS.GetWindowTitle( -1, OriginalWindowTitle)𝑇ℎ𝑒𝑛\n𝐼𝑓𝐶𝑆.𝐷𝑒𝑟𝑖𝑣𝑒𝑁𝑒𝑤𝑅𝑒𝑐𝑜𝑟𝑑(𝐶𝑜𝑝𝑦𝐹𝑖𝑥𝑒𝑑𝐹𝑖𝑒𝑙𝑑)𝑇ℎ𝑒𝑛\n𝐼𝑓𝐶𝑆.𝐺𝑒𝑡𝑊𝑖𝑛𝑑𝑜𝑤𝑇𝑖𝑡𝑙𝑒(−1,𝑁𝑒𝑤𝑊𝑖𝑛𝑑𝑜𝑤𝑇𝑖𝑡𝑙𝑒)�ℎ��\n����.���������������(��������������)�ℎ��\n����.��������������(−1,�������������� ) = FALSE Then\n MsgBox "Sorry, the macro failed.", CRITICAL_MESSAGE, WaltsMacros\n𝐸𝑥𝑖𝑡𝑆𝑢𝑏\n𝐸𝑛𝑑𝐼𝑓\n𝐸𝑙𝑠𝑒\n𝑀𝑠𝑔𝐵𝑜𝑥"𝑆𝑜𝑟𝑟𝑦,𝑡ℎ𝑒𝑚𝑎𝑐𝑟𝑜𝑓𝑎𝑖𝑙𝑒𝑑.",𝐶𝑅𝐼𝑇𝐼𝐶𝐴𝐿𝑀𝐸𝑆𝑆𝐴𝐺𝐸,𝑊𝑎𝑙𝑡𝑠𝑀𝑎𝑐𝑟𝑜𝑠\n�������\n�����\n����\n������"�����,�ℎ������������.",���������������,�����������\n Exit Sub\n End If\n Else\n MsgBox "Sorry, the macro failed.", CRITICAL_MESSAGE, WaltsMacros\n𝐸𝑥𝑖𝑡𝑆𝑢𝑏\nEnd𝐼𝑓\n\n\n\n\n\nWindowCount\n�������\nEnd��\n\n\n\n\n\nWindowCount ) Then\n If CurrentWindowTitle=𝑂𝑟𝑖𝑔𝑖𝑛𝑎𝑙𝑊𝑖𝑛𝑑𝑜𝑤𝑇𝑖𝑡𝑙𝑒=������������������� Then\n CS.CloseRecord( FALSE )\n '
"Line: 54 Column: 33 Syntax Error: no viable alternative at input 'Option Explicit\n\n\n\nSub Main\n\nDim CS As Object\nOn Error Resume Next\nSet CS = GetObject( , ""Connex.Client"" )\nOn Error GoTo 0\nIf CS Is Nothing Then Set CS = CreateObject( ""Connex.Client"" )\n\nConst INFORMATION_MESSAGE As Integer = 64\n\nDim CountOfWindows%\nDim OtherWindowsClosed%\nDim TypeOfWindow%\nDim WaltsMacros :𝑊𝑎𝑙𝑡𝑠𝑀𝑎𝑐𝑟𝑜𝑠
  = ""[Walt's macros] Extras3:CloseAllButBibs""\n\nDim i As Integer\n\nCountOfWindows% = CS.WindowCount\ni = 0\n\nDo\n If CS.SetTopWindow( i ) = TRUE Then\n TypeOfWindow% = CS.ItemType\n Select Case TypeOfWindow%\n Case 5 To 11, 13, 15 To 16, 21 To 25\n CS.CloseList\n OtherWindowsClosed% = OtherWindowsClosed% + 1\n i = i - 1\n Case 3 To 4, 14, 18, 20\n CS.CloseRecord( False )\n '"
"Line: 53 Column: 33 Syntax Error: no viable alternative at input 'Option Explicit\n\n\n\nSub Main\n\nConst INFORMATION_MESSAGE As Integer = 64\n\nDim CS As Object\nOn Error Resume Next\nSet CS = GetObject( , ""Connex.Client"" )\nOn Error GoTo 0\nIf CS Is Nothing Then Set CS = CreateObject( ""Connex.Client"" )\n\nDim CountOfAuthorityWindows%\nDim CountOfWindows%\nDim TypeOfWindow%\nDim WaltsMacros :𝑊𝑎𝑙𝑡𝑠𝑀𝑎𝑐𝑟𝑜𝑠
  = ""[Walt's macros] Extras3:CloseAuthorities""\n\nDim i As Integer\n\n\n\n\nRecyclePoint:\n\nCountOfWindows% = CS.WindowCount - 1\nFor i = 0 To CountOfWindows%\n If CS.SetTopWindow( i ) = TRUE Then\n TypeOfWindow% = CS.ItemType\n Select Case TypeOfWindow%\n Case 3 To 4, 14, 18, 20\n CountOfAuthorityWindows% = CountOfAuthorityWindows% + 1\n CS.CloseRecord( False )\n '"


using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;

namespace org.vrsl.qbasic
{
    public class ErrorPostProcessor
    {
        private static readonly Regex LINE_NUMBER_PATTERN = new Regex(@"line (\d+)");
        private static readonly Regex COLUMN_NUMBER_PATTERN = new Regex(@"column (\d+)");
        private static readonly Regex ERROR_MESSAGE_PATTERN = new Regex(@"message: (.+)");

        public string TransformError(string antlrError)
        {
            string lineNumber = ExtractValue(antlrError, LINE_NUMBER_PATTERN);
            string columnNumber = ExtractValue(antlrError, COLUMN_NUMBER_PATTERN);
            string errorMessage = ExtractValue(antlrError, ERROR_MESSAGE_PATTERN);

            if (errorMessage != null)
            {
                foreach (ErrorRephrase rephraser in QuickBasicErrorsListener.ErrorsRephrases)
                {
                    if (rephraser.CanRephrase(errorMessage))
                    {
                        errorMessage = rephraser.GetRephrased();
                        break;
                    }
                }
            }

            return $"Line {lineNumber}, column {columnNumber}: {errorMessage ?? antlrError}";
        }

        private string ExtractValue(string input, Regex pattern)
        {
            Match match = pattern.Match(input);
            return match.Success ? match.Groups[1].Value : null;
        }
    }
}
using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;

public class ErrorPostProcessor
{
    private readonly List<ErrorMapping> errorMappings;

    public ErrorPostProcessor()
    {
        // Initialize error mappings
        errorMappings = new List<ErrorMapping>
        {
            new ErrorMapping(@"extraneous input '([^']+)' expecting {([^}]+)}", "Unexpected input '$1', expected: $2."),
            new ErrorMapping(@"missing '([^']+)' at '\\\\n'", "Missing '$1'."),
            new ErrorMapping(@"mismatched input '([^']+)' expecting {([^}]+)}", "Missing second operand in binary operation."),
            new ErrorMapping(@"extraneous input '([*|\\/]|\\\\\\\\)' expecting {([^}]+)}", "Extra operator '$1' in the context of binary operator."),
            new ErrorMapping(@"no viable alternative at input '([^']+)'", "Unable to recognize input starting with '$1'."),
            new ErrorMapping(@"extraneous input 'AS' expecting {([^}]+)}", "Unexpected type definition.")
            // Add more mappings as needed
        };
    }

    public string ProcessError(string errorMessage)
    {
        foreach (var mapping in errorMappings)
        {
            var regex = new Regex(mapping.Pattern);
            var match = regex.Match(errorMessage);

            if (match.Success)
            {
                var formattedMessage = FormatMessage(mapping.Message, match.Groups);
                return formattedMessage;
            }
        }

        // If no matching pattern found, return the original error message
        return errorMessage;
    }

    private string FormatMessage(string message, GroupCollection groups)
    {
        // Replace placeholders like $1, $2 with matched group values
        for (int i = 1; i < groups.Count; i++)
        {
            message = message.Replace($"${i}", groups[i].Value);
        }

        return message;
    }
}

public class ErrorMapping
{
    public string Pattern { get; }
    public string Message { get; }

    public ErrorMapping(string pattern, string message)
    {
        Pattern = pattern;
        Message = message;
    }
}


using Antlr4.Build.Tasks;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace MacroRunner.Frontend.SemanticAnalyzer
{
    public class ErrorPostProcessor
    {
        private readonly List<ErrorMapping> errorMappings;

        public ErrorPostProcessor()
        {
            // Initialize error mappings
            errorMappings = new List<ErrorMapping>
        {
            new ErrorMapping(@"extraneous input '([^']+)' expecting {([^}]+)}", "Unexpected input '$1', expected: $2."),
            new ErrorMapping(@"missing '([^']+)' at '\\\\n'", "Missing '$1'."),
            new ErrorMapping(@"mismatched input '([^']+)' expecting {([^}]+)}", "Missing second operand in binary operation."),
            new ErrorMapping(@"extraneous input '([*|\\/]|\\\\\\\\)' expecting {([^}]+)}", "Extra operator '$1' in the context of binary operator."),
            new ErrorMapping(@"no viable alternative at input '([^']+)'", "Unable to recognize input starting with '$1'."),
            new ErrorMapping(@"extraneous input 'AS' expecting {([^}]+)}", "Unexpected type definition.")
            // Add more mappings as needed
        };
        }

        private string ExtractLineNumber(string antlrError)
        {
            Match match = Regex.Match(antlrError, @"line (\d+)");
            return match.Success ? match.Groups[1].Value : "N/A";
        }

        private string ExtractColumnNumber(string antlrError)
        {
            Match match = Regex.Match(antlrError, @"column (\d+)");
            return match.Success ? match.Groups[1].Value : "N/A";
        }

        private string ExtractErrorMessage(string antlrError)
        {
            Match match = Regex.Match(antlrError, @"message: (.+)");
            return match.Success ? match.Groups[1].Value : "Unknown error";
        }

        public virtual string TransformError(string antlrError)
        {
            string lineNumber = ExtractLineNumber(antlrError);
            string columnNumber = ExtractColumnNumber(antlrError);
            string errorMessage = ExtractErrorMessage(antlrError);

            string userFriendlyError = $"Error at line {lineNumber}, column {columnNumber}: ProcessError(errorMessage)"; 

            return userFriendlyError;
        }

        public string ProcessError(string errorMessage)
        {
            foreach (var mapping in errorMappings)
            {
                var regex = new Regex(mapping.Pattern);
                var match = regex.Match(errorMessage);

                if (match.Success)
                {
                    var formattedMessage = FormatMessage(mapping.Message, match.Groups);
                    return formattedMessage;
                }
            }

            // If no matching pattern found, return the original error message
            return errorMessage;
        }

        private string FormatMessage(string message, GroupCollection groups)
        {
            // Replace placeholders like $1, $2 with matched group values
            for (int i = 1; i < groups.Count; i++)
            {
                message = message.Replace($"${i}", groups[i].Value);
            }

            return message;
        }
    }

    public class ErrorMapping
    {
        public string Pattern { get; }
        public string Message { get; }

        public ErrorMapping(string pattern, string message)
        {
            Pattern = pattern;
            Message = message;
        }
    }
}


