using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;
using Connex.DynamicForms;
using Moq;
using Newtonsoft.Json.Linq;
using Xunit;

public class FormHandlerTests
{
    [Fact]
    public void ConstructForm_WithSingleControl_ReturnsFormWithControl()
    {
        // Arrange
        var formHandler = new FormHandler();
        var formDefinition = "{\"x\": 10, \"y\": 20, \"width\": 300, \"height\": 200, \"title\": \"Test Form\", \"elements\": [{\"type\": \"TextBox\", \"name\": \"TextBox1\", \"x\": 30, \"y\": 40, \"width\": 100, \"height\": 30}]}";

        // Act
        var result = formHandler.ConstructForm(formDefinition);

        // Assert
        Assert.NotNull(result);
        Assert.Single(result.Controls);
        Assert.IsType<TextBox>(result.Controls[0]);
        Assert.Equal("TextBox1", result.Controls[0].Name);
        Assert.Equal(30, result.Controls[0].Left);
        Assert.Equal(40, result.Controls[0].Top);
        Assert.Equal(100, result.Controls[0].Width);
        Assert.Equal(30, result.Controls[0].Height);
    }

    [Fact]
    public void InitializeValues_WithValidValues_SetsControlValues()
    {
        // Arrange
        var formHandler = new FormHandler();
        var form = new Form();
        var values = new Dictionary<string, object> { { "TextBox1", "Value1" } };
        Action<string, object, DialogAction> callback = null;

        // Act
        var result = formHandler.InitializeValues(form, values, callback);

        // Assert
        Assert.NotNull(result);
        Assert.IsType<Form>(result);

        // Assuming TextBox control exists in the form
        var textBoxControl = form.Controls.OfType<TextBox>().FirstOrDefault();
        Assert.NotNull(textBoxControl);
        Assert.Equal("Value1", textBoxControl.Text);
    }

    [Fact]
    public void CreateGroupControl_WithGroupElement_ReturnsGroupControl()
    {
        // Arrange
        var formHandler = new FormHandler();
        var groupElement = JObject.Parse("{\"type\": \"Group\", \"elements\": [{\"type\": \"TextBox\", \"name\": \"TextBox1\", \"x\": 30, \"y\": 40, \"width\": 100, \"height\": 30}]}");

        // Act
        var result = formHandler.CreateGroupControl(groupElement);

        // Assert
        Assert.NotNull(result);
        Assert.IsType<GroupControl>(result);
        Assert.Single(result.Controls);
        Assert.IsType<TextBox>(result.Controls[0]);
        Assert.Equal("TextBox1", result.Controls[0].Name);
        Assert.Equal(30, result.Controls[0].Left);
        Assert.Equal(40, result.Controls[0].Top);
        Assert.Equal(100, result.Controls[0].Width);
        Assert.Equal(30, result.Controls[0].Height);
    }

    // Add more tests for other methods as needed
}
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;
using Connex.DynamicForms;
using Moq;
using Newtonsoft.Json.Linq;
using Xunit;

public class FormHandlerTests
{
    // ... (previous tests)

    [Fact]
    public void CreateGroupControl_WithNestedGroups_ReturnsNestedGroupControl()
    {
        // Arrange
        var formHandler = new FormHandler();
        var nestedGroupElement = JObject.Parse(@"{
            ""type"": ""Group"",
            ""elements"": [
                {
                    ""type"": ""Group"",
                    ""elements"": [{""type"": ""TextBox"", ""name"": ""NestedTextBox"", ""x"": 50, ""y"": 60, ""width"": 120, ""height"": 40}]
                }
            ]
        }");

        // Act
        var result = formHandler.CreateGroupControl(nestedGroupElement);

        // Assert
        Assert.NotNull(result);
        Assert.IsType<GroupControl>(result);
        Assert.Single(result.Controls);
        Assert.IsType<GroupControl>(result.Controls[0]);

        var nestedGroupControl = (GroupControl)result.Controls[0];
        Assert.Single(nestedGroupControl.Controls);
        Assert.IsType<TextBox>(nestedGroupControl.Controls[0]);
        Assert.Equal("NestedTextBox", nestedGroupControl.Controls[0].Name);
        Assert.Equal(50, nestedGroupControl.Controls[0].Left);
        Assert.Equal(60, nestedGroupControl.Controls[0].Top);
        Assert.Equal(120, nestedGroupControl.Controls[0].Width);
        Assert.Equal(40, nestedGroupControl.Controls[0].Height);
    }

    [Fact]
    public void CreateGroupControl_WithEmptyGroupElement_ReturnsEmptyGroupControl()
    {
        // Arrange
        var formHandler = new FormHandler();
        var emptyGroupElement = JObject.Parse("{\"type\": \"Group\", \"elements\": []}");

        // Act
        var result = formHandler.CreateGroupControl(emptyGroupElement);

        // Assert
        Assert.NotNull(result);
        Assert.IsType<GroupControl>(result);
        Assert.Empty(result.Controls);
    }

    // Add more tests for other group-related scenarios
}
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;
using Connex.DynamicForms;
using Moq;
using Newtonsoft.Json.Linq;
using Xunit;

public class FormHandlerTests
{
    // ... (previous tests)

    [Fact]
    public void ConstructForm_WithSingleControlAndGroup_ReturnsFormWithControlAndGroup()
    {
        // Arrange
        var formHandler = new FormHandler();
        var formDefinition = @"
            {
                ""x"": 10,
                ""y"": 20,
                ""width"": 300,
                ""height"": 200,
                ""title"": ""Test Form"",
                ""elements"": [
                    {""type"": ""TextBox"", ""name"": ""TextBox1"", ""x"": 30, ""y"": 40, ""width"": 100, ""height"": 30},
                    {
                        ""type"": ""Group"",
                        ""elements"": [
                            {""type"": ""CheckBox"", ""name"": ""CheckBox1"", ""x"": 50, ""y"": 60, ""width"": 80, ""height"": 20}
                        ]
                    }
                ]
            }";

        // Act
        var result = formHandler.ConstructForm(formDefinition);

        // Assert
        Assert.NotNull(result);
        Assert.Equal(2, result.Controls.Count);

        var textBoxControl = result.Controls.OfType<TextBox>().FirstOrDefault();
        Assert.NotNull(textBoxControl);
        Assert.Equal("TextBox1", textBoxControl.Name);
        Assert.Equal(30, textBoxControl.Left);
        Assert.Equal(40, textBoxControl.Top);
        Assert.Equal(100, textBoxControl.Width);
        Assert.Equal(30, textBoxControl.Height);

        var groupControl = result.Controls.OfType<GroupControl>().FirstOrDefault();
        Assert.NotNull(groupControl);
        Assert.Single(groupControl.Controls);
        var checkBoxControl = groupControl.Controls.OfType<CheckBox>().FirstOrDefault();
        Assert.NotNull(checkBoxControl);
        Assert.Equal("CheckBox1", checkBoxControl.Name);
        Assert.Equal(50, checkBoxControl.Left);
        Assert.Equal(60, checkBoxControl.Top);
        Assert.Equal(80, checkBoxControl.Width);
        Assert.Equal(20, checkBoxControl.Height);
    }

    [Fact]
    public void CreateSingleControl_WithInvalidType_ReturnsNull()
    {
        // Arrange
        var formHandler = new FormHandler();
        var invalidElementType = JObject.Parse("{\"type\": \"InvalidType\", \"name\": \"InvalidControl\", \"x\": 10, \"y\": 20, \"width\": 30, \"height\": 40}");

        // Act
        var result = formHandler.CreateSingleControl(invalidElementType);

        // Assert
        Assert.Null(result);
    }

    // Add more tests for other scenarios with both single controls and group controls
}
